{
  "address": "0x05bfd6F6AbB5BaBB18df553614e0A7b9934Dd0aa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_intefaceAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "Requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "FLRSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "VXTAmount",
          "type": "uint256"
        }
      ],
      "name": "BuyVXTEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BuyVXT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CheckTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ContractOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GetVXTtoFLRPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VXPriceRequested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_flrPrice",
          "type": "uint256"
        }
      ],
      "name": "addVXTPricingFLR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveDeX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ETHAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateReqPricesFLR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "FLRAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "VXTAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_FLRAmount",
          "type": "uint256"
        }
      ],
      "name": "checkFLR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_VXTAmount",
          "type": "uint256"
        }
      ],
      "name": "convertToVXT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vxtInterface",
      "outputs": [
        {
          "internalType": "contract VotreXTXInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6da270102dae9976923f3270a6a2b5280209d9217a8ef965138b2c7dacd4711f",
  "receipt": {
    "to": null,
    "from": "0xe3c5Fd667F54BCdF1910cFe61fC39c3F490cbba7",
    "contractAddress": "0x05bfd6F6AbB5BaBB18df553614e0A7b9934Dd0aa",
    "transactionIndex": 0,
    "gasUsed": "638237",
    "logsBloom": "0x
    "blockHash": "0xdb637c72612890af9d7d8703a5b45255bcf7f431b610ca8a063f8d3ffb1bbe14",
    "transactionHash": "0x6da270102dae9976923f3270a6a2b5280209d9217a8ef965138b2c7dacd4711f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9313794,
        "transactionHash": "0x6da270102dae9976923f3270a6a2b5280209d9217a8ef965138b2c7dacd4711f",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x00000000000000000000000098b8e9b5830f04fe3b8d56a2f8455e337037ba280000000000000000000000000000000000000000000000000000000000004231",
        "logIndex": 0,
        "blockHash": "0xdb637c72612890af9d7d8703a5b45255bcf7f431b610ca8a063f8d3ffb1bbe14"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9313794,
        "transactionHash": "0x6da270102dae9976923f3270a6a2b5280209d9217a8ef965138b2c7dacd4711f",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x0000000000000000000000004f52e61907b0ed9f26b88f16b2510a4ca524d6d00000000000000000000000000000000000000000000000000000000000003099",
        "logIndex": 1,
        "blockHash": "0xdb637c72612890af9d7d8703a5b45255bcf7f431b610ca8a063f8d3ffb1bbe14"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9313794,
        "transactionHash": "0x6da270102dae9976923f3270a6a2b5280209d9217a8ef965138b2c7dacd4711f",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x000000000000000000000000d2a1bb23eb350814a30dd6f9de78bb2c8fdd9f1d0000000000000000000000000000000000000000000000000000000000005ed0",
        "logIndex": 2,
        "blockHash": "0xdb637c72612890af9d7d8703a5b45255bcf7f431b610ca8a063f8d3ffb1bbe14"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9313794,
        "transactionHash": "0x6da270102dae9976923f3270a6a2b5280209d9217a8ef965138b2c7dacd4711f",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x0000000000000000000000006892bdbbb14e1c9bd46bf31e7bac94d038fc82a6000000000000000000000000000000000000000000000000000000000000422d",
        "logIndex": 3,
        "blockHash": "0xdb637c72612890af9d7d8703a5b45255bcf7f431b610ca8a063f8d3ffb1bbe14"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9313794,
        "transactionHash": "0x6da270102dae9976923f3270a6a2b5280209d9217a8ef965138b2c7dacd4711f",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x000000000000000000000000bd33bdff04c357f7fc019e72d0504c24cf4aa0100000000000000000000000000000000000000000000000000000000000008688",
        "logIndex": 4,
        "blockHash": "0xdb637c72612890af9d7d8703a5b45255bcf7f431b610ca8a063f8d3ffb1bbe14"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9313794,
        "transactionHash": "0x6da270102dae9976923f3270a6a2b5280209d9217a8ef965138b2c7dacd4711f",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x000000000000000000000000bc1f76ceb521eb5484b8943b5462d08ea96617a10000000000000000000000000000000000000000000000000000000000004eb2",
        "logIndex": 5,
        "blockHash": "0xdb637c72612890af9d7d8703a5b45255bcf7f431b610ca8a063f8d3ffb1bbe14"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9313794,
        "transactionHash": "0x6da270102dae9976923f3270a6a2b5280209d9217a8ef965138b2c7dacd4711f",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x00000000000000000000000058fb598ec6db6901aa6f26a9a2087e9274128e5900000000000000000000000000000000000000000000000000000000000103ba",
        "logIndex": 6,
        "blockHash": "0xdb637c72612890af9d7d8703a5b45255bcf7f431b610ca8a063f8d3ffb1bbe14"
      }
    ],
    "blockNumber": 9313794,
    "cumulativeGasUsed": "638237",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8d644bd12D1295f25c5B045aE5e29903F6556290"
  ],
  "numDeployments": 2,
  "solcInputHash": "f5b9ab12b869c94ceb6eaa4d5f65adf4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_intefaceAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"FLRSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"VXTAmount\",\"type\":\"uint256\"}],\"name\":\"BuyVXTEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BuyVXT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CheckTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ContractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetVXTtoFLRPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VXPriceRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_flrPrice\",\"type\":\"uint256\"}],\"name\":\"addVXTPricingFLR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveDeX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ETHAmount\",\"type\":\"uint256\"}],\"name\":\"calculateReqPricesFLR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"FLRAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"VXTAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_FLRAmount\",\"type\":\"uint256\"}],\"name\":\"checkFLR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_VXTAmount\",\"type\":\"uint256\"}],\"name\":\"convertToVXT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vxtInterface\",\"outputs\":[{\"internalType\":\"contract VotreXTXInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VotreXDex.sol\":\"VotreXDex\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":120},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Pausable} from \\\"../../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_update}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\\n        super._update(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0xb18c53aecf95e53339972e3d496a56c42e6b60a03a49ce8e6a37d3bd9d5d0a67\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/VotreXDex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n// import \\\"./VotreXToken.sol\\\";\\nimport \\\"./VotreXTxInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract VotreXDex {\\n    using SafeMath for uint256;\\n\\n    constructor(address _intefaceAddress){\\n        vxtInterface = VotreXTXInterface(_intefaceAddress);\\n        ContractOwner = msg.sender;\\n    }\\n\\n    VotreXTXInterface public immutable vxtInterface;\\n    address public immutable ContractOwner;\\n    uint256 public VXPriceRequested;\\n    uint256 private FLRPricePoint;\\n\\n    mapping(address => uint256) public allowances;\\n\\n    event BuyVXTEvent (address indexed Requester,  uint256 FLRSent, uint256 VXTAmount);\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == ContractOwner, \\\"Caller is not a staker\\\");\\n        _;\\n    }\\n\\n    function addVXTPricingFLR(uint256 _flrPrice) public {\\n        uint256 PricingConversion = _flrPrice * 1 ether;\\n        FLRPricePoint = PricingConversion;\\n    }\\n\\n    function approveDeX(uint256 amount) external onlyOwner {\\n        require(msg.sender != address(0), \\\"DeX Address not set\\\");\\n        vxtInterface.approveDeX(amount);\\n        allowances[address(this)] = amount * 10 ** 18;\\n    }\\n\\n    function checkFLR(uint256 _FLRAmount) public pure returns(uint256) {\\n        uint256 VXT = _FLRAmount * 1 ether;\\n\\n        return VXT;\\n    }\\n\\n    function convertToVXT(uint256 _VXTAmount) public pure returns(uint256) {\\n        uint256 VXT = _VXTAmount.mul(10**18);\\n\\n        return VXT;\\n    }\\n\\n    function GetVXTtoFLRPrice() public view returns(uint256) {\\n\\n        return FLRPricePoint;\\n    }\\n\\n    function calculateReqPricesFLR(uint256 ETHAmount) public view returns (uint256 FLRAmount, uint256 VXTAmount) {\\n        uint256 SentFLR = ETHAmount.mul(1 ether);\\n        uint256 vxtCheckout = SentFLR.div(FLRPricePoint);\\n        uint256 vxtNominal = vxtCheckout;\\n\\n        return (SentFLR, vxtNominal);\\n    }\\n\\n    receive() external payable {\\n        // emit Received(msg.sender, msg.value);\\n    }\\n\\n    function BuyVXT() external payable {\\n        uint256 SentFLR = msg.value.mul(1 ether);\\n        uint256 vxtCheckout = SentFLR.div(FLRPricePoint);\\n\\n        require(msg.value > FLRPricePoint.div(2), \\\"Not sending at minimum reqirement\\\");\\n        require(msg.value > 0, \\\"Ether value can't 0\\\");\\n        \\n        vxtInterface.VotreXTx(msg.sender, vxtCheckout);\\n        allowances[msg.sender] = vxtCheckout;\\n\\n        emit BuyVXTEvent(msg.sender, msg.value, vxtCheckout);\\n    }\\n\\n    function withdrawBalance() external onlyOwner{\\n        require(address(this).balance != 0 ether, \\\"No FLR Left\\\");\\n        uint256 withdrawalValue = address(this).balance;\\n        payable(ContractOwner).transfer(withdrawalValue);\\n    }\\n\\n    function CheckTokenBalance () external view onlyOwner returns (uint256) {\\n        uint256 contractBalance = vxtInterface.checkBalance(address(this));\\n        return contractBalance;\\n    }\\n    \\n    function withdrawToken() external onlyOwner{\\n        uint256 contractBalance = vxtInterface.checkBalance(address(this));\\n        require(contractBalance > 0, \\\"No Token left\\\");\\n        vxtInterface.VotreXTx(payable(msg.sender), contractBalance);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x2d080edbb92f1e06c2a5444be770ab8001ea41ee6ac15f6742e9a611621458b8\",\"license\":\"MIT\"},\"contracts/VotreXToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\\\";\\n\\ncontract VotreXToken is ERC20, ERC20Burnable, ERC20Pausable {\\n    constructor(uint256 _initialMintedToken, uint256 _MaxSupplies)\\n        ERC20(\\\"VotreXToken\\\", \\\"VOX\\\")\\n    {\\n        Owner = msg.sender;\\n        MAXSupply = _MaxSupplies * 10 ** decimals();\\n        _mint(address(this),  _initialMintedToken * 10 ** decimals());\\n        activeSystem = true;\\n        currentMintAmount = (_MaxSupplies - _initialMintedToken) * 10 ** decimals();\\n    }\\n\\n    address private Owner;\\n    bool private activeSystem;\\n    uint256 public immutable MAXSupply;\\n    uint256 private currentMintAmount;\\n\\n    mapping (address Owner => IContract) public ContractStorage;\\n\\n    struct IContract{\\n        address Authorized;\\n        address stakingContract;\\n        address dexContract;\\n        address VotreXContract;\\n        address interfaceContract;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == Owner, \\\"Caller is not an Owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyInterface() {\\n        require(\\n            msg.sender == ContractStorage[Owner].interfaceContract, \\\"Caller is not an interface\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyExecutor(){\\n        require(msg.sender == ContractStorage[Owner].Authorized);\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(\\n            msg.sender == ContractStorage[Owner].interfaceContract ||\\n            msg.sender == Owner, \\\"Token - Caller is not an Authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyPaused() {\\n        require(\\n            activeSystem == false, \\\"System still active\\\"\\n        );\\n        _;\\n    }\\n\\n    function customApprove(address owner, address spender, uint256 amount) external onlyInterface {\\n        _approve(owner, spender, amount);\\n    }\\n\\n    function pause() public onlyOwner {\\n        require(activeSystem == true, \\\"System is Paused\\\");\\n        _pause();\\n        activeSystem = false;\\n    }\\n\\n    function Activate() public onlyOwner {\\n        require(activeSystem == false, \\\"System is Activated\\\");\\n        _unpause();\\n        activeSystem = true;\\n    }\\n\\n    function setAutomationExecutor(address _executorAddress) external onlyOwner onlyPaused {\\n        require(\\n            _executorAddress != address(0),\\n            \\\"Invalid contract address\\\"\\n        );\\n        require(\\n            _executorAddress != ContractStorage[msg.sender].Authorized,\\n            \\\"Already Registered Executor\\\"\\n        );\\n        ContractStorage[msg.sender].Authorized = _executorAddress;\\n    }\\n\\n    function setStakingContract(address _stakingContractAddress) external onlyOwner onlyPaused {\\n        require(\\n            _stakingContractAddress != address(0),\\n            \\\"Invalid contract address\\\"\\n        );\\n        require(\\n            _stakingContractAddress != ContractStorage[msg.sender].stakingContract,\\n            \\\"Already Registered Staking\\\"\\n        );\\n        ContractStorage[msg.sender].stakingContract = _stakingContractAddress;\\n    }\\n\\n    function setDexContract(address _DEXContractAddress) external onlyOwner onlyPaused {\\n        require(\\n            _DEXContractAddress != address(0),\\n            \\\"Invalid contract address\\\"\\n        );\\n        require(\\n            _DEXContractAddress != ContractStorage[msg.sender].dexContract,\\n            \\\"Already Registered DEX\\\"\\n        );\\n        ContractStorage[msg.sender].dexContract = _DEXContractAddress;\\n    }\\n\\n    function setInterface(address _InterfaceContractAddress) external onlyOwner onlyPaused {\\n        require(\\n            _InterfaceContractAddress != address(0),\\n            \\\"Invalid contract address\\\"\\n        );\\n        require(\\n            _InterfaceContractAddress != ContractStorage[msg.sender].interfaceContract,\\n            \\\"Already Registered Interface\\\"\\n        );\\n        ContractStorage[msg.sender].interfaceContract = _InterfaceContractAddress;\\n    }\\n\\n    function setVotreXContract(address _VotreXContractAddress) external onlyOwner onlyPaused {\\n        require(\\n            _VotreXContractAddress != address(0),\\n            \\\"Invalid contract address\\\"\\n        );\\n        require(\\n            _VotreXContractAddress != ContractStorage[msg.sender].VotreXContract,\\n            \\\"Already Registered VotreX\\\"\\n        );\\n        ContractStorage[msg.sender].VotreXContract = _VotreXContractAddress;\\n    }\\n\\n    function checkBlockTime() public view returns(uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function calculateHalving() public view returns (uint256) {\\n        uint256 nextMint = currentMintAmount / 2;\\n\\n        return nextMint;\\n    }\\n\\n    function autoMinting() public onlyExecutor{\\n        require(totalSupply() < MAXSupply, \\\"Max Supply Reached\\\");\\n\\n        if (currentMintAmount == 0) {\\n            uint256 finalMintingValue = MAXSupply - totalSupply() ;\\n            _mint(address(this), finalMintingValue);\\n        } else {\\n            uint256 mintingValue = calculateHalving();\\n            _mint(address(this), mintingValue);\\n            currentMintAmount = mintingValue;\\n\\n        }\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyAuthorized {\\n        if (msg.sender == ContractStorage[Owner].interfaceContract) {\\n            require(totalSupply() < MAXSupply);\\n            _mint(to, amount);\\n        } else if (msg.sender == Owner) {\\n            uint256 mintingValue = amount * 10**decimals();\\n            require(totalSupply() < MAXSupply);\\n            require(amount < 4000000);\\n            _mint(to, mintingValue);\\n            currentMintAmount =  currentMintAmount / 2;\\n        }\\n    }\\n\\n    function burn(uint256 value) public onlyOwner override {\\n        uint256 burnedValue = value * 10**decimals();\\n        _burn(address(this), burnedValue);\\n    }\\n\\n    function getCurrentMintAmount() external view returns(uint256){\\n        return currentMintAmount;\\n    }\\n\\n    function getOwnerAddress() external view onlyOwner returns(address) {\\n        return(Owner);\\n    }\\n\\n    function _update(address from, address to, uint256 value)\\n        internal\\n        override(ERC20, ERC20Pausable)\\n    {\\n        super._update(from, to, value);\\n    }\\n\\n}\",\"keccak256\":\"0x632da66ba637f8b1fd459791061740f8441550616523a83f553149a6bf412d2c\",\"license\":\"MIT\"},\"contracts/VotreXTxInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"./VotreXToken.sol\\\";\\r\\n\\r\\ncontract VotreXTXInterface {\\r\\n\\r\\n    constructor(address _tokenAddress) {\\r\\n        InterfaceMaster = msg.sender;\\r\\n        interfaceActivated = false;\\r\\n        vxtToken = VotreXToken(_tokenAddress);\\r\\n        ContractStorage[msg.sender].tokenContract = _tokenAddress;\\r\\n    }\\r\\n\\r\\n    // gas: 646200;\\r\\n\\r\\n    VotreXToken internal immutable vxtToken;\\r\\n    bool private interfaceActivated;\\r\\n    address private VotreXContract;\\r\\n    address private dexContract;\\r\\n    address private airdropContract;\\r\\n    address private stakingContract;\\r\\n    address private immutable InterfaceMaster;\\r\\n    uint256 internal immutable MaxAllowances = 15000000 * 10 ** 18;\\r\\n\\r\\n    mapping(address InterfaceMaster => IContract) public ContractStorage;\\r\\n    // mapping(address => uint256) public allowances;\\r\\n\\r\\n    struct IContract{\\r\\n        address Authorized;\\r\\n        address tokenContract;\\r\\n        address stakingContract;\\r\\n        address dexContract;\\r\\n        address VotreXContract;\\r\\n        address airdropContract;\\r\\n    }\\r\\n\\r\\n    modifier onlyActivated() {\\r\\n        require(interfaceActivated == true, \\\"Interface not Active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPaused() {\\r\\n        require(interfaceActivated == false, \\\"Interface still Active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyStaking() {\\r\\n        require(\\r\\n            msg.sender == stakingContract,\\r\\n            \\\"Interface - Caller is not a Stake Contract\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == InterfaceMaster, \\\"Interface - Caller is not Owner!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyDeX() {\\r\\n        require(msg.sender == dexContract, \\\"Interface - Caller is not DexApps!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAuthorized() {\\r\\n        require(\\r\\n            msg.sender == dexContract ||\\r\\n            msg.sender == stakingContract ||\\r\\n            msg.sender == VotreXContract ||\\r\\n            msg.sender == airdropContract,\\r\\n            \\\"Interface - Caller is not an Authorized!\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event BuyVXTEvent(address Buyer, uint256 VXTTransfered);\\r\\n    event TransferedVXTEvent(address Receiver, uint256 VXTTransfered);\\r\\n    event withdrawnToken(address from, address Receiver, uint256 VXTTransfered);\\r\\n    event VotedEvent(address Voter, uint256 VotedPower);\\r\\n    event TokenDropped(address Recipient, uint256 DroppedValue);\\r\\n\\r\\n    function changeSystemState() external onlyOwner{\\r\\n\\r\\n        if (interfaceActivated == false) {\\r\\n            interfaceActivated = true;\\r\\n        } else if (interfaceActivated == true) {\\r\\n            interfaceActivated = false;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function isActivatedInterfaceCheck() public view returns (bool isActivatedInterface) {\\r\\n\\r\\n        return interfaceActivated;\\r\\n    }\\r\\n\\r\\n    function getTokenContract() external view onlyOwner returns(address){\\r\\n        return ContractStorage[msg.sender].tokenContract;\\r\\n    }\\r\\n\\r\\n    function setVotreXSys (address _VotreXContract) external onlyOwner onlyPaused{\\r\\n        require(\\r\\n            _VotreXContract != ContractStorage[msg.sender].VotreXContract,\\r\\n            \\\"Interface - Registered VotreX\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _VotreXContract != address(0),\\r\\n            \\\"Interface - Invalid contract address\\\"\\r\\n        );\\r\\n\\r\\n        VotreXContract = _VotreXContract;\\r\\n        ContractStorage[msg.sender].VotreXContract = _VotreXContract;\\r\\n    }\\r\\n\\r\\n    function setStakingContract (address _stakingAddress) external onlyOwner onlyPaused{\\r\\n        require(\\r\\n            _stakingAddress != ContractStorage[msg.sender].stakingContract,\\r\\n            \\\"Interface - Registered VotreX Staking\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _stakingAddress != address(0),\\r\\n            \\\"Interface - Invalid contract address\\\"\\r\\n        );\\r\\n\\r\\n        stakingContract = _stakingAddress;\\r\\n        ContractStorage[msg.sender].stakingContract = _stakingAddress;\\r\\n    }\\r\\n\\r\\n    function setDeX (address _dexContract) external onlyOwner onlyPaused{\\r\\n        require(\\r\\n            _dexContract != ContractStorage[msg.sender].dexContract,\\r\\n            \\\"Interface - Registered VotreX DeX\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _dexContract != address(0),\\r\\n            \\\"Invalid contract address\\\"\\r\\n        );\\r\\n\\r\\n        dexContract = _dexContract;\\r\\n        ContractStorage[msg.sender].dexContract = _dexContract;\\r\\n    }\\r\\n\\r\\n    function setAirdrop (address _AirdropContract) external onlyOwner onlyPaused{\\r\\n        require(\\r\\n            _AirdropContract != ContractStorage[msg.sender].airdropContract,\\r\\n            \\\"Interface - Registered VotreX Airdrop\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _AirdropContract != address(0),\\r\\n            \\\"Invalid contract address\\\"\\r\\n        );\\r\\n\\r\\n        airdropContract = _AirdropContract;\\r\\n        ContractStorage[msg.sender].airdropContract = _AirdropContract;\\r\\n    }\\r\\n\\r\\n    function approveTxInterface(uint32 amount) external onlyOwner {\\r\\n        uint256 TokenConversion = uint256(amount) * 10 ** vxtToken.decimals();\\r\\n\\r\\n        require(address(this) != address(0), \\\"Interface - Invalid address\\\");\\r\\n        require(TokenConversion < MaxAllowances, \\\"Can not approve more than limit\\\");\\r\\n\\r\\n        vxtToken.customApprove(address(vxtToken), address(this), TokenConversion);\\r\\n    }\\r\\n\\r\\n    function approveVotreX(uint256 amount) external onlyAuthorized onlyActivated{\\r\\n        uint256 TokenConversion = amount * 10 ** vxtToken.decimals();\\r\\n\\r\\n        require(msg.sender != address(0), \\\"Interface - VotreX Address not set\\\");\\r\\n        require(TokenConversion < MaxAllowances, \\\"Can not approve more than limit\\\");\\r\\n\\r\\n        vxtToken.customApprove(msg.sender, address(this), TokenConversion);\\r\\n    }\\r\\n\\r\\n    function approveAirdrop(uint256 amount) external onlyAuthorized onlyActivated{\\r\\n        uint256 TokenConversion = amount * 10 ** vxtToken.decimals();\\r\\n\\r\\n        require(address(this) != address(0), \\\"Interface - Invalid address\\\");\\r\\n        require(TokenConversion < MaxAllowances, \\\"Can not approve more than limit\\\");\\r\\n\\r\\n        vxtToken.customApprove(msg.sender, address(this), TokenConversion);\\r\\n    }\\r\\n\\r\\n    function approveStaking(uint256 amount) external onlyAuthorized onlyActivated{\\r\\n        uint256 TokenConversion = amount * 10 ** vxtToken.decimals();\\r\\n\\r\\n        require(msg.sender != address(0), \\\"Interface - Staking Address not set\\\");\\r\\n        require(amount < MaxAllowances, \\\"Interface - Can not approve more than limit\\\");\\r\\n\\r\\n        vxtToken.customApprove(msg.sender, address(this), TokenConversion);\\r\\n    }\\r\\n\\r\\n    function approveDeX(uint256 amount) external virtual onlyAuthorized onlyActivated{\\r\\n        uint256 TokenConversion = amount * 10 ** vxtToken.decimals();\\r\\n\\r\\n        require(msg.sender != address(0), \\\"Interface - DeX Address not set\\\");\\r\\n        require(TokenConversion < MaxAllowances, \\\"Interface - Can not approve more than limit\\\");\\r\\n\\r\\n        vxtToken.customApprove(msg.sender, address(this), TokenConversion);\\r\\n    }\\r\\n\\r\\n    function checkApprovalLimit(address _ContractAddress) external view returns (uint256){\\r\\n        if(_ContractAddress == ContractStorage[msg.sender].VotreXContract){\\r\\n            return (\\r\\n                vxtToken.allowance(\\r\\n                    ContractStorage[msg.sender].VotreXContract, address(this)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        else if(_ContractAddress == ContractStorage[msg.sender].dexContract){\\r\\n            return (\\r\\n                vxtToken.allowance(\\r\\n                    ContractStorage[msg.sender].dexContract, address(this)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        else if(_ContractAddress == ContractStorage[msg.sender].stakingContract){\\r\\n            return (\\r\\n                vxtToken.allowance(\\r\\n                    ContractStorage[msg.sender].stakingContract, address(this)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        else if(_ContractAddress == ContractStorage[msg.sender].airdropContract){\\r\\n            return (\\r\\n                vxtToken.allowance(\\r\\n                    ContractStorage[msg.sender].airdropContract, address(this)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        else {\\r\\n            return (404);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkBalance(address account) external view virtual onlyActivated returns (uint256) {\\r\\n        return vxtToken.balanceOf(account);\\r\\n    }\\r\\n\\r\\n    function balanceTx(address _Recipient, uint256 _value) external onlyOwner{\\r\\n        uint256 vxtNominalTransfer = _value * 10 ** vxtToken.decimals();\\r\\n\\r\\n        if (\\r\\n            _Recipient == ContractStorage[msg.sender].VotreXContract\\r\\n        ) {\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= vxtNominalTransfer\\r\\n            )\\r\\n            {\\r\\n                vxtToken.transferFrom(address(vxtToken), VotreXContract, vxtNominalTransfer);\\r\\n            } else {\\r\\n                vxtToken.customApprove(msg.sender, _Recipient, vxtNominalTransfer);\\r\\n                vxtToken.customApprove(msg.sender, address(this), vxtNominalTransfer);\\r\\n\\r\\n                vxtToken.transferFrom(address(vxtToken), VotreXContract, vxtNominalTransfer);\\r\\n            }\\r\\n        } else if (\\r\\n            _Recipient == ContractStorage[msg.sender].dexContract\\r\\n        ) {\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= vxtNominalTransfer\\r\\n            )\\r\\n            {\\r\\n                vxtToken.transferFrom(address(vxtToken),dexContract, vxtNominalTransfer);\\r\\n            }\\r\\n            else {\\r\\n                vxtToken.customApprove(msg.sender, _Recipient, vxtNominalTransfer);\\r\\n                vxtToken.customApprove(msg.sender, address(this), vxtNominalTransfer);\\r\\n\\r\\n                vxtToken.transferFrom(address(vxtToken), dexContract, vxtNominalTransfer);\\r\\n            }\\r\\n        } else if (_Recipient == InterfaceMaster) {\\r\\n            require(_value < 4000000, \\\"Interface - Transfer limit Reached\\\");\\r\\n            require(msg.sender == InterfaceMaster, \\\"Interface - Not Authorized\\\");\\r\\n\\r\\n            // Case for Interface Master\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= vxtNominalTransfer\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n            ){\\r\\n                vxtToken.transferFrom(address(vxtToken), address(InterfaceMaster), vxtNominalTransfer);\\r\\n            } else {\\r\\n                vxtToken.customApprove(address(vxtToken), address(this), vxtNominalTransfer);\\r\\n                vxtToken.customApprove(address(vxtToken), InterfaceMaster, vxtNominalTransfer);\\r\\n\\r\\n                vxtToken.transferFrom(address(vxtToken), msg.sender, vxtNominalTransfer);\\r\\n\\r\\n                emit TransferedVXTEvent(msg.sender, vxtNominalTransfer);\\r\\n            }\\r\\n        }else if (\\r\\n            _Recipient != InterfaceMaster||\\r\\n            _Recipient != ContractStorage[msg.sender].dexContract ||\\r\\n            _Recipient != ContractStorage[msg.sender].VotreXContract\\r\\n        ){\\r\\n            revert();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function VotreXTx(\\r\\n        address _Recipient,\\r\\n        uint256 _value\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        onlyAuthorized\\r\\n        onlyActivated\\r\\n    {\\r\\n        uint256 vxtNominalTransfer = _value * 10 ** vxtToken.decimals();\\r\\n\\r\\n        if (msg.sender == VotreXContract) {\\r\\n            // Case for VotreX\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= vxtNominalTransfer\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n            )\\r\\n            {\\r\\n                vxtToken.transferFrom(_Recipient, msg.sender, vxtNominalTransfer);\\r\\n            }\\r\\n            else {\\r\\n                vxtToken.customApprove(msg.sender, _Recipient, vxtNominalTransfer);\\r\\n                vxtToken.customApprove(msg.sender, address(this), vxtNominalTransfer);\\r\\n                vxtToken.customApprove(_Recipient, address(this), vxtNominalTransfer);\\r\\n\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, vxtNominalTransfer);\\r\\n\\r\\n                emit TransferedVXTEvent(msg.sender, vxtNominalTransfer);\\r\\n            }\\r\\n        } else if (msg.sender == dexContract) {\\r\\n            // Case for DeX\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= _value\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n            )\\r\\n            {\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\r\\n            }\\r\\n            else {\\r\\n                vxtToken.customApprove(msg.sender, _Recipient, _value);\\r\\n                vxtToken.customApprove(msg.sender, address(this), _value);\\r\\n\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\r\\n\\r\\n                emit BuyVXTEvent(msg.sender, _value);\\r\\n            }\\r\\n        } else if (msg.sender == stakingContract) {\\r\\n            // Case for Staking Contract\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= _value\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n            ){\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value); \\r\\n            }\\r\\n            else {\\r\\n                vxtToken.customApprove(msg.sender, _Recipient, _value);\\r\\n                vxtToken.customApprove(msg.sender, address(this), _value);\\r\\n                vxtToken.customApprove(_Recipient, address(this), _value);\\r\\n\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\r\\n\\r\\n                emit withdrawnToken(msg.sender, _Recipient, _value);\\r\\n            }\\r\\n        } else if (msg.sender == airdropContract) {\\r\\n            // Case for Airdrop\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= _value\\r\\n            ){\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\r\\n            }\\r\\n            else {\\r\\n                vxtToken.customApprove(msg.sender, _Recipient, _value);\\r\\n                vxtToken.customApprove(msg.sender, address(this), _value);\\r\\n\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\r\\n\\r\\n                emit TokenDropped(_Recipient, _value);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function VoteTx(address _Sender, uint256 _value) external onlyAuthorized onlyActivated{\\r\\n        require (msg.sender == VotreXContract, \\\"Interface - Not VotreX\\\");\\r\\n\\r\\n        uint256 vxtNominalTransfer = _value * 10 ** vxtToken.decimals();\\r\\n\\r\\n        if (\\r\\n            vxtToken.allowance(msg.sender, address(this)) >= vxtNominalTransfer\\r\\n            &&\\r\\n            vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n        ) {\\r\\n            vxtToken.transferFrom(_Sender, msg.sender, vxtNominalTransfer);\\r\\n        } else {\\r\\n            vxtToken.customApprove(_Sender, address(this), vxtNominalTransfer);\\r\\n\\r\\n            vxtToken.transferFrom(_Sender, msg.sender, vxtNominalTransfer);\\r\\n\\r\\n            emit VotedEvent(msg.sender, vxtNominalTransfer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function printVXT(address _recipient, uint256 _rewardValue) external onlyAuthorized onlyActivated{\\r\\n        vxtToken.mint(_recipient, _rewardValue);\\r\\n    }\\r\\n\\r\\n    function totalSupplies() external view returns(uint256) {\\r\\n        return vxtToken.totalSupply();\\r\\n    }\\r\\n\\r\\n    function Stake(\\r\\n        bool isStaking,\\r\\n        address _Recipient,\\r\\n        uint256 _value\\r\\n    )\\r\\n        external\\r\\n        onlyAuthorized\\r\\n        onlyActivated\\r\\n    {\\r\\n        if (\\r\\n            msg.sender == stakingContract\\r\\n            &&\\r\\n            isStaking == true\\r\\n        ) {\\r\\n            // Case for Staking\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= _value\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, _Recipient) >= _value\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, _Recipient) >= MaxAllowances\\r\\n                )\\r\\n            {\\r\\n                vxtToken.transferFrom(_Recipient, msg.sender, _value);\\r\\n            } else {\\r\\n                // Case 4: Approve and transfer\\r\\n                vxtToken.customApprove(_Recipient, address(this), _value);\\r\\n                vxtToken.customApprove(msg.sender, address(this), _value);\\r\\n                vxtToken.customApprove(_Recipient, msg.sender, _value);\\r\\n\\r\\n                vxtToken.transferFrom(_Recipient, msg.sender, _value);\\r\\n            }\\r\\n        } else if (\\r\\n            msg.sender == stakingContract\\r\\n            &&\\r\\n            isStaking == false\\r\\n        ) {\\r\\n            // Case for unStaking & Reward Distribution\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= _value\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, _Recipient) >= _value\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, _Recipient) >= MaxAllowances\\r\\n            )\\r\\n            {\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\r\\n            }\\r\\n            else {\\r\\n                vxtToken.customApprove(msg.sender, _Recipient, _value);\\r\\n\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x819f81736b7bfc43280cd70c6f66b6d3d77dcb0e3460cc6240bc055141884485\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610b78380380610b7883398101604081905261002f91610044565b6001600160a01b03166080523360a052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160a051610a9a6100de600039600081816101df01528181610476015281816105a6015281816106300152818161068801526107e401526000818160df015281816103b3015281816104cb0152818161071e01528181610839015261090a0152610a9a6000f3fe6080604052600436106100c15760003560e01c80635fd8c7101161006f5780635fd8c710146102015780636d779b04146102165780637707834a14610236578063a43260ca1461024b578063aec4d1cb1461026b578063c39e60ef1461028b578063ca628c78146102a157600080fd5b80630d4137ad146100cd5780630e6ca2661461011e5780631a80c09a146101285780631c5fc9911461014b578063284ceef71461016b5780632b603c71146101a05780635a63fbc9146101cd57600080fd5b366100c857005b600080fd5b3480156100d957600080fd5b506101017f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101266102b6565b005b34801561013457600080fd5b5061013d610469565b604051908152602001610115565b34801561015757600080fd5b5061013d610166366004610992565b610544565b34801561017757600080fd5b5061018b610186366004610992565b610560565b60408051928352602083019190915201610115565b3480156101ac57600080fd5b5061013d6101bb3660046109ab565b60026020526000908152604090205481565b3480156101d957600080fd5b506101017f000000000000000000000000000000000000000000000000000000000000000081565b34801561020d57600080fd5b5061012661059b565b34801561022257600080fd5b50610126610231366004610992565b61067d565b34801561024257600080fd5b5060015461013d565b34801561025757600080fd5b50610126610266366004610992565b6107a9565b34801561027757600080fd5b5061013d610286366004610992565b6107c4565b34801561029757600080fd5b5061013d60005481565b3480156102ad57600080fd5b506101266107d9565b60006102ca34670de0b6b3a7640000610971565b905060006102e36001548361098690919063ffffffff16565b6001549091506102f4906002610986565b34116103515760405162461bcd60e51b815260206004820152602160248201527f4e6f742073656e64696e67206174206d696e696d756d207265716972656d656e6044820152601d60fa1b60648201526084015b60405180910390fd5b600034116103975760405162461bcd60e51b8152602060048201526013602482015272045746865722076616c75652063616e2774203606c1b6044820152606401610348565b604051630624515160e31b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906331228a8890604401600060405180830381600087803b1580156103ff57600080fd5b505af1158015610413573d6000803e3d6000fd5b50503360008181526002602090815260409182902086905581513481529081018690529193507f98b2415025a47ceaf14fb03663a7aa128fd3516166ac337255b49be5e49c84d092500160405180910390a25050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104b35760405162461bcd60e51b8152600401610348906109d4565b604051632fa8a91360e11b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f51522690602401602060405180830381865afa15801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610a04565b91505090565b60008061055983670de0b6b3a7640000610971565b9392505050565b6000808061057684670de0b6b3a7640000610971565b9050600061058f6001548361098690919063ffffffff16565b91959194509092505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105e35760405162461bcd60e51b8152600401610348906109d4565b476000036106215760405162461bcd60e51b815260206004820152600b60248201526a139bc8119314881319599d60aa1b6044820152606401610348565b60405147906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169082156108fc029083906000818181858888f19350505050158015610679573d6000803e3d6000fd5b5050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106c55760405162461bcd60e51b8152600401610348906109d4565b336107085760405162461bcd60e51b8152602060048201526013602482015272111956081059191c995cdcc81b9bdd081cd95d606a1b6044820152606401610348565b604051631b5de6c160e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636d779b0490602401600060405180830381600087803b15801561076a57600080fd5b505af115801561077e573d6000803e3d6000fd5b5050505080670de0b6b3a76400006107969190610a1d565b3060009081526002602052604090205550565b60006107bd82670de0b6b3a7640000610a1d565b6001555050565b60008061055983670de0b6b3a7640000610a1d565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108215760405162461bcd60e51b8152600401610348906109d4565b604051632fa8a91360e11b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f51522690602401602060405180830381865afa158015610888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac9190610a04565b9050600081116108ee5760405162461bcd60e51b815260206004820152600d60248201526c139bc8151bdad95b881b19599d609a1b6044820152606401610348565b604051630624515160e31b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906331228a8890604401600060405180830381600087803b15801561095657600080fd5b505af115801561096a573d6000803e3d6000fd5b5050505050565b600061097d8284610a1d565b90505b92915050565b600061097d8284610a42565b6000602082840312156109a457600080fd5b5035919050565b6000602082840312156109bd57600080fd5b81356001600160a01b038116811461055957600080fd5b60208082526016908201527521b0b63632b91034b9903737ba10309039ba30b5b2b960511b604082015260600190565b600060208284031215610a1657600080fd5b5051919050565b808202811582820484141761098057634e487b7160e01b600052601160045260246000fd5b600082610a5f57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220a7b169c458e6bf2a7bf021097d7fe852cd81fc593cab1dbafc1bf6b81b698ad664736f6c63430008170033",
  "deployedBytecode": "0x6080604052600436106100c15760003560e01c80635fd8c7101161006f5780635fd8c710146102015780636d779b04146102165780637707834a14610236578063a43260ca1461024b578063aec4d1cb1461026b578063c39e60ef1461028b578063ca628c78146102a157600080fd5b80630d4137ad146100cd5780630e6ca2661461011e5780631a80c09a146101285780631c5fc9911461014b578063284ceef71461016b5780632b603c71146101a05780635a63fbc9146101cd57600080fd5b366100c857005b600080fd5b3480156100d957600080fd5b506101017f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101266102b6565b005b34801561013457600080fd5b5061013d610469565b604051908152602001610115565b34801561015757600080fd5b5061013d610166366004610992565b610544565b34801561017757600080fd5b5061018b610186366004610992565b610560565b60408051928352602083019190915201610115565b3480156101ac57600080fd5b5061013d6101bb3660046109ab565b60026020526000908152604090205481565b3480156101d957600080fd5b506101017f000000000000000000000000000000000000000000000000000000000000000081565b34801561020d57600080fd5b5061012661059b565b34801561022257600080fd5b50610126610231366004610992565b61067d565b34801561024257600080fd5b5060015461013d565b34801561025757600080fd5b50610126610266366004610992565b6107a9565b34801561027757600080fd5b5061013d610286366004610992565b6107c4565b34801561029757600080fd5b5061013d60005481565b3480156102ad57600080fd5b506101266107d9565b60006102ca34670de0b6b3a7640000610971565b905060006102e36001548361098690919063ffffffff16565b6001549091506102f4906002610986565b34116103515760405162461bcd60e51b815260206004820152602160248201527f4e6f742073656e64696e67206174206d696e696d756d207265716972656d656e6044820152601d60fa1b60648201526084015b60405180910390fd5b600034116103975760405162461bcd60e51b8152602060048201526013602482015272045746865722076616c75652063616e2774203606c1b6044820152606401610348565b604051630624515160e31b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906331228a8890604401600060405180830381600087803b1580156103ff57600080fd5b505af1158015610413573d6000803e3d6000fd5b50503360008181526002602090815260409182902086905581513481529081018690529193507f98b2415025a47ceaf14fb03663a7aa128fd3516166ac337255b49be5e49c84d092500160405180910390a25050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104b35760405162461bcd60e51b8152600401610348906109d4565b604051632fa8a91360e11b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f51522690602401602060405180830381865afa15801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610a04565b91505090565b60008061055983670de0b6b3a7640000610971565b9392505050565b6000808061057684670de0b6b3a7640000610971565b9050600061058f6001548361098690919063ffffffff16565b91959194509092505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105e35760405162461bcd60e51b8152600401610348906109d4565b476000036106215760405162461bcd60e51b815260206004820152600b60248201526a139bc8119314881319599d60aa1b6044820152606401610348565b60405147906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169082156108fc029083906000818181858888f19350505050158015610679573d6000803e3d6000fd5b5050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106c55760405162461bcd60e51b8152600401610348906109d4565b336107085760405162461bcd60e51b8152602060048201526013602482015272111956081059191c995cdcc81b9bdd081cd95d606a1b6044820152606401610348565b604051631b5de6c160e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636d779b0490602401600060405180830381600087803b15801561076a57600080fd5b505af115801561077e573d6000803e3d6000fd5b5050505080670de0b6b3a76400006107969190610a1d565b3060009081526002602052604090205550565b60006107bd82670de0b6b3a7640000610a1d565b6001555050565b60008061055983670de0b6b3a7640000610a1d565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108215760405162461bcd60e51b8152600401610348906109d4565b604051632fa8a91360e11b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f51522690602401602060405180830381865afa158015610888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ac9190610a04565b9050600081116108ee5760405162461bcd60e51b815260206004820152600d60248201526c139bc8151bdad95b881b19599d609a1b6044820152606401610348565b604051630624515160e31b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906331228a8890604401600060405180830381600087803b15801561095657600080fd5b505af115801561096a573d6000803e3d6000fd5b5050505050565b600061097d8284610a1d565b90505b92915050565b600061097d8284610a42565b6000602082840312156109a457600080fd5b5035919050565b6000602082840312156109bd57600080fd5b81356001600160a01b038116811461055957600080fd5b60208082526016908201527521b0b63632b91034b9903737ba10309039ba30b5b2b960511b604082015260600190565b600060208284031215610a1657600080fd5b5051919050565b808202811582820484141761098057634e487b7160e01b600052601160045260246000fd5b600082610a5f57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220a7b169c458e6bf2a7bf021097d7fe852cd81fc593cab1dbafc1bf6b81b698ad664736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4980,
        "contract": "contracts/VotreXDex.sol:VotreXDex",
        "label": "VXPriceRequested",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4982,
        "contract": "contracts/VotreXDex.sol:VotreXDex",
        "label": "FLRPricePoint",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4986,
        "contract": "contracts/VotreXDex.sol:VotreXDex",
        "label": "allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}