{
  "address": "0xb601087d72661c7A6fE0Df0368cD9aE91d014B8B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_TXInterfaceAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CheckTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VotreXOwnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_candidateName",
          "type": "string"
        }
      ],
      "name": "addCandidateDetail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "admin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "adminOrgCount",
          "type": "uint8"
        },
        {
          "internalType": "bytes10",
          "name": "AdminVoterIDOrg1",
          "type": "bytes10"
        },
        {
          "internalType": "bytes10",
          "name": "AdminVoterIDOrg2",
          "type": "bytes10"
        },
        {
          "internalType": "address",
          "name": "electionAdminAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nextOrgCreationBlock",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "adminName",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID2",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveSystem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_YourName",
          "type": "string"
        }
      ],
      "name": "buyContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "changeSystemState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_electionName",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_candidateCount",
          "type": "uint8"
        }
      ],
      "name": "createElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "electionInfo",
      "outputs": [
        {
          "internalType": "enum VotreXSystem.ElectionStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "candidateList",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isFinished",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "electionID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "electionName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "orgID",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "electionResults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPruned",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "adminAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVoter",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "electionName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "digitalSignature",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "registeredOrganization",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "electionWinner",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "signedBy",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "finishElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        }
      ],
      "name": "generateUniqueVoterID",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_candidateName",
          "type": "string"
        }
      ],
      "name": "getCandidateDetail",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "candidateName",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "candidateID",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "getCurrentVoteResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "candidateID",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "candidateVoteCount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "candidateName",
              "type": "string"
            }
          ],
          "internalType": "struct VotreXSystem.CandidateDetail[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        }
      ],
      "name": "getOrgIDHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegistrationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "userName",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "registeredOrgList",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "voterIDList",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "participatedElectionEvents",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "getelectionInfo",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "electionID",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "electionName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalCandidates",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "candidateNames",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "voteCounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isVotreXActivated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "organizationData",
      "outputs": [
        {
          "internalType": "enum VotreXSystem.OrganizationType",
          "name": "orgType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "electionAdminAddresses",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "electionEventCounter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMembers",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "orgName",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "orgID",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orgName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_adminName",
          "type": "string"
        },
        {
          "internalType": "enum VotreXSystem.OrganizationType",
          "name": "_orgType",
          "type": "uint8"
        }
      ],
      "name": "registerOrganization",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_voterName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        }
      ],
      "name": "registerVoter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_PriceinEther",
          "type": "uint256"
        }
      ],
      "name": "setOrgPriceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "startElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "candidateID",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "VotesAmount",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "VoterAddress",
          "type": "address"
        },
        {
          "internalType": "bytes16",
          "name": "VoterIDOrg1",
          "type": "bytes16"
        },
        {
          "internalType": "bytes16",
          "name": "VoterIDOrg2",
          "type": "bytes16"
        },
        {
          "internalType": "string",
          "name": "VoterName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID2",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "VXTAmount",
          "type": "uint8"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9b69b6de896ff4e9eae5ef8e7f673b736b7d0e2dfcf0f9371239d0f8bdedbc50",
  "receipt": {
    "to": null,
    "from": "0xe3c5Fd667F54BCdF1910cFe61fC39c3F490cbba7",
    "contractAddress": "0xb601087d72661c7A6fE0Df0368cD9aE91d014B8B",
    "transactionIndex": 37,
    "gasUsed": "5419181",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7b23886c517f02d32595c3c9757c4b4626647f08e3e99e22d1563ae710c3d519",
    "transactionHash": "0x9b69b6de896ff4e9eae5ef8e7f673b736b7d0e2dfcf0f9371239d0f8bdedbc50",
    "logs": [],
    "blockNumber": 6164530,
    "cumulativeGasUsed": "12286322",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0791B180202E62a187D0293bdf9cD23a460915c2"
  ],
  "numDeployments": 1,
  "solcInputHash": "f222cec34620c082b345b5cd6cd49f30",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TXInterfaceAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CheckTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VotreXOwnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_candidateName\",\"type\":\"string\"}],\"name\":\"addCandidateDetail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"adminOrgCount\",\"type\":\"uint8\"},{\"internalType\":\"bytes10\",\"name\":\"AdminVoterIDOrg1\",\"type\":\"bytes10\"},{\"internalType\":\"bytes10\",\"name\":\"AdminVoterIDOrg2\",\"type\":\"bytes10\"},{\"internalType\":\"address\",\"name\":\"electionAdminAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nextOrgCreationBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"adminName\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID2\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_YourName\",\"type\":\"string\"}],\"name\":\"buyContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeSystemState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_electionName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_candidateCount\",\"type\":\"uint8\"}],\"name\":\"createElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"electionInfo\",\"outputs\":[{\"internalType\":\"enum VotreXSystem.ElectionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"candidateList\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isFinished\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"electionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"electionName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"orgID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"electionResults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPruned\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoter\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"electionName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"digitalSignature\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"registeredOrganization\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"electionWinner\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"signedBy\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"finishElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"}],\"name\":\"generateUniqueVoterID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_candidateName\",\"type\":\"string\"}],\"name\":\"getCandidateDetail\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"candidateName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"candidateID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"getCurrentVoteResult\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"candidateID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"candidateVoteCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"candidateName\",\"type\":\"string\"}],\"internalType\":\"struct VotreXSystem.CandidateDetail[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"}],\"name\":\"getOrgIDHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistrationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"registeredOrgList\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"voterIDList\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"participatedElectionEvents\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"getelectionInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"electionID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"electionName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalCandidates\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"candidateNames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"voteCounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVotreXActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"organizationData\",\"outputs\":[{\"internalType\":\"enum VotreXSystem.OrganizationType\",\"name\":\"orgType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"electionAdminAddresses\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"electionEventCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMembers\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orgName\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"orgID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_adminName\",\"type\":\"string\"},{\"internalType\":\"enum VotreXSystem.OrganizationType\",\"name\":\"_orgType\",\"type\":\"uint8\"}],\"name\":\"registerOrganization\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_voterName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"}],\"name\":\"registerVoter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PriceinEther\",\"type\":\"uint256\"}],\"name\":\"setOrgPriceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"startElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"candidateID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"VotesAmount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"VoterAddress\",\"type\":\"address\"},{\"internalType\":\"bytes16\",\"name\":\"VoterIDOrg1\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"VoterIDOrg2\",\"type\":\"bytes16\"},{\"internalType\":\"string\",\"name\":\"VoterName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID2\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"VXTAmount\",\"type\":\"uint8\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ultimate_VotreXSystemRC2.sol\":\"VotreXSystem\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":120},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Pausable} from \\\"../../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_update}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\\n        super._update(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0xb18c53aecf95e53339972e3d496a56c42e6b60a03a49ce8e6a37d3bd9d5d0a67\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"contracts/Ultimate_VotreXSystemRC2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// pragma abicoder v2;\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"./UtilityLibrary.sol\\\";\\r\\nimport \\\"./VotreXTxInterface.sol\\\";\\r\\n\\r\\ncontract VotreXSystem{\\r\\n\\r\\n    using UtilityLibrary for *;\\r\\n\\r\\n    constructor(address _TXInterfaceAddress){\\r\\n        VotreXOwnerAddress = msg.sender;\\r\\n        VotreXActivated = false;\\r\\n        TxInterface = VotreXTXInterface(_TXInterfaceAddress);\\r\\n    }\\r\\n\\r\\n    VotreXTXInterface internal immutable TxInterface;\\r\\n    bool private VotreXActivated;\\r\\n    address private previousVotreXOwnerAddress;\\r\\n    address private VotreXOwnerAddress;\\r\\n    bytes32 public VotreXOwnerName = keccak256(abi.encode(\\\"ATom\\\"));\\r\\n    uint256 private organizationsCounter;\\r\\n    uint256 private VotreXUserCounter;\\r\\n    uint256 private OrganizationPriceFee = 20 ether;\\r\\n    \\r\\n    mapping(string  => Organization) public organizationData;\\r\\n    mapping(address => ElectionAdmins) public admin;\\r\\n    mapping(address => Voter) public voters;\\r\\n    mapping(bytes32 => ElectionDetail) public electionInfo;\\r\\n    mapping(string  => ElectionResult) public electionResults;\\r\\n    mapping(bytes32 => ActiveElectionList) private activeElection;\\r\\n    mapping(bytes32 => bool) private electionExistanceChecks;\\r\\n    mapping(bytes16 => bool) private votersIDExists;\\r\\n    mapping(address => bool) private registeredAdmin;\\r\\n\\r\\n    enum ElectionStatus {\\r\\n        Preparation,\\r\\n        Scheduled,\\r\\n        Started,\\r\\n        Finished\\r\\n    }\\r\\n\\r\\n    enum OrganizationType {\\r\\n        Organization,\\r\\n        Corporate\\r\\n    }\\r\\n\\r\\n    struct Organization {\\r\\n        OrganizationType orgType;\\r\\n        address electionAdminAddresses;\\r\\n        uint256 electionEventCounter;\\r\\n        uint256 totalMembers;\\r\\n        bytes32 orgName;\\r\\n        string orgID;\\r\\n    }\\r\\n\\r\\n    struct ElectionAdmins {\\r\\n        bool isRegistered;\\r\\n        uint8 adminOrgCount;\\r\\n        bytes10 AdminVoterIDOrg1;\\r\\n        bytes10 AdminVoterIDOrg2;\\r\\n        address electionAdminAddress;\\r\\n        uint256 nextOrgCreationBlock;\\r\\n        bytes32 adminName;\\r\\n        string RegisteredOrgID1;\\r\\n        string RegisteredOrgID2;\\r\\n    }\\r\\n\\r\\n    struct ActiveElectionList{\\r\\n        bytes32 orgID;\\r\\n        bytes32 activeElectionID;\\r\\n    }\\r\\n\\r\\n    struct ElectionResult {\\r\\n        bool isPruned;\\r\\n        address adminAddress;\\r\\n        uint startTime; \\r\\n        uint endTime;\\r\\n        uint totalVoter;\\r\\n        bytes32 electionName;\\r\\n        bytes32 digitalSignature;\\r\\n        string registeredOrganization;\\r\\n        string electionWinner;\\r\\n        string signedBy;\\r\\n    }\\r\\n    \\r\\n    struct Voter{\\r\\n        bool isRegistered;\\r\\n        address VoterAddress;\\r\\n        bytes16 VoterIDOrg1;\\r\\n        bytes16 VoterIDOrg2;\\r\\n        string VoterName;\\r\\n        string RegisteredOrgID1;\\r\\n        string RegisteredOrgID2;\\r\\n        string[] participatedElectionEvents;\\r\\n    }\\r\\n\\r\\n    struct ElectionDetail{\\r\\n        ElectionStatus status;\\r\\n        uint8 candidateList;\\r\\n        bool isFinished;\\r\\n        bytes32 electionID;\\r\\n        bytes32 electionName;\\r\\n        uint startTime;\\r\\n        uint endTime;\\r\\n        string orgID;\\r\\n        CandidateDetail[] candidates;\\r\\n    }\\r\\n\\r\\n    struct CandidateDetail{\\r\\n        uint8 candidateID;\\r\\n        uint256 candidateVoteCount;\\r\\n        string candidateName;\\r\\n    }\\r\\n\\r\\n    modifier onlyOrgAdmin(string memory _IDParameters) {\\r\\n        bool isAdminRegisteredForOrg = false;\\r\\n        if (\\r\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID1))\\r\\n            ==\\r\\n            keccak256(abi.encodePacked(_IDParameters))\\r\\n            ||\\r\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID2))\\r\\n            ==\\r\\n            keccak256(abi.encodePacked(_IDParameters))\\r\\n        ) {\\r\\n            isAdminRegisteredForOrg = true;\\r\\n        } else if (\\r\\n            bytes32(abi.encodePacked(admin[msg.sender].RegisteredOrgID1))\\r\\n            !=\\r\\n            bytes32(abi.encodePacked(_IDParameters))\\r\\n            ||\\r\\n            bytes32(abi.encodePacked(admin[msg.sender].RegisteredOrgID2))\\r\\n            !=\\r\\n            bytes32(abi.encodePacked(_IDParameters))\\r\\n        ) {\\r\\n            string memory orgID = UtilityLibrary.extractOrgId(_IDParameters);\\r\\n            isAdminRegisteredForOrg = true;\\r\\n\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            isAdminRegisteredForOrg,\\r\\n            \\\"Admin not in this organization\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAuthorizedMember(string memory _userElectionID) {\\r\\n        string memory orgID = UtilityLibrary.extractOrgId(_userElectionID);\\r\\n\\r\\n        bool isAdminRegisteredForOrg = (\\r\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID1))\\r\\n            ==\\r\\n            keccak256(abi.encodePacked(orgID))\\r\\n        )||(\\r\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID2))\\r\\n            ==\\r\\n            keccak256(abi.encodePacked(orgID))\\r\\n        );\\r\\n\\r\\n        bool isVoterRegisteredForOrg = (\\r\\n            keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID1))\\r\\n            ==\\r\\n            keccak256(abi.encodePacked(orgID))\\r\\n        )||(\\r\\n            keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID2))\\r\\n            ==\\r\\n            keccak256(abi.encodePacked(orgID))\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            isAdminRegisteredForOrg || isVoterRegisteredForOrg,\\r\\n            \\\"You are not an authorized member\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier canCreateOrg() {\\r\\n        require(\\r\\n            block.number >= admin[msg.sender].nextOrgCreationBlock,\\r\\n            \\\"Wait for the next block to create a new org\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVotreXOwner() {\\r\\n        require(\\r\\n            msg.sender == VotreXOwnerAddress,\\r\\n            \\\"Not the contract owner\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyWhenActivated() {\\r\\n        require(\\r\\n            VotreXActivated == true,\\r\\n            \\\"System is not activated\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // event Received(address UserAddress, uint256 FLRSent);\\r\\n\\r\\n    function approveSystem(uint256 amount) external onlyVotreXOwner {\\r\\n        require(\\r\\n            amount > 0,\\r\\n            \\\"Amount can not 0\\\"\\r\\n        );\\r\\n\\r\\n        TxInterface.approveVotreX(amount);\\r\\n    }\\r\\n\\r\\n    function buyContract(string memory _YourName) public payable {\\r\\n        require(VotreXActivated == false);\\r\\n        require(msg.value == 12 ether, \\\"Please send 12 Ether\\\");\\r\\n\\r\\n        previousVotreXOwnerAddress = VotreXOwnerAddress;\\r\\n        VotreXOwnerAddress = address(0);\\r\\n        VotreXOwnerName = keccak256(abi.encodePacked(_YourName));\\r\\n\\r\\n        payable(previousVotreXOwnerAddress).transfer(msg.value);\\r\\n\\r\\n        previousVotreXOwnerAddress = address(0);\\r\\n        VotreXOwnerAddress = msg.sender;\\r\\n    }\\r\\n\\r\\n    function CheckTokenBalance () external view onlyVotreXOwner returns (uint256) {\\r\\n        return TxInterface.checkBalance(address(this));\\r\\n    }\\r\\n\\r\\n    function changeSystemState() external onlyVotreXOwner{\\r\\n        if (VotreXActivated == false) {\\r\\n            require(VotreXActivated == false, \\\"Activated!\\\");\\r\\n            VotreXActivated = true;\\r\\n        } else if (VotreXActivated == true) {\\r\\n            require(VotreXActivated == true, \\\"Paused!\\\");\\r\\n            VotreXActivated = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setOrgPriceFee(uint256 _PriceinEther) external onlyVotreXOwner {\\r\\n        OrganizationPriceFee = _PriceinEther * 1 ether;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        // emit Received(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function registerOrganization(\\r\\n        string memory _orgName,\\r\\n        string memory _orgID,\\r\\n        string memory _adminName,\\r\\n        OrganizationType _orgType\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        canCreateOrg\\r\\n        onlyWhenActivated\\r\\n    {\\r\\n        uint8 VXTAmount = 5;\\r\\n        ElectionAdmins storage AdminInfo = admin[msg.sender];\\r\\n\\r\\n        require(\\r\\n            msg.value == OrganizationPriceFee,\\r\\n            \\\"Please send correct amount\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            organizationsCounter < 32000,\\r\\n            \\\"Maximum Organization reached\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            bytes32(organizationData[_orgID].orgName).length > 0,\\r\\n            \\\"Organization name is registered\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            organizationData[_orgID].electionAdminAddresses == address(0),\\r\\n            \\\"Organization ID is registered\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            UtilityLibrary.onlyAlphanumericCharacters(_orgID),\\r\\n            \\\"Org ID should be alphanumeric\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            bytes(_orgName).length > 0,\\r\\n            \\\"Please fill Organization Name\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            bytes(_orgName).length < 32,\\r\\n            \\\"Org name can't exceed 32\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            bytes(_adminName).length > 1,\\r\\n            \\\"Admin name can't be empty\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            bytes(_orgID).length == 3 || bytes(_orgID).length == 4,\\r\\n            \\\"Org ID should 3 or 4 characters\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            !UtilityLibrary.containsWhitespaceCheck(_orgID),\\r\\n            \\\"spaces in Org ID not allowed\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID1))\\r\\n            !=\\r\\n            keccak256(abi.encodePacked(_orgID))\\r\\n            &&\\r\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID2))\\r\\n            !=\\r\\n            keccak256(abi.encodePacked(_orgID)),\\r\\n            \\\"Admin is registered in organization\\\"\\r\\n        );\\r\\n\\r\\n        Organization storage newOrg = organizationData[_orgID];\\r\\n        newOrg.orgID = _orgID;\\r\\n        newOrg.orgName = bytes32(abi.encodePacked(_orgName));\\r\\n        newOrg.orgType = _orgType;\\r\\n        newOrg.electionAdminAddresses = msg.sender;\\r\\n        newOrg.electionEventCounter = 0;\\r\\n        newOrg.totalMembers = 1;\\r\\n\\r\\n        bytes10 UniqueAdminvoterID = bytes10(abi.encodePacked(_orgID, \\\"-\\\", \\\"Admin\\\"));\\r\\n\\r\\n        if (bytes(admin[msg.sender].RegisteredOrgID1).length == 0) {\\r\\n            admin[msg.sender].RegisteredOrgID1 = _orgID;\\r\\n            admin[msg.sender].AdminVoterIDOrg1 = UniqueAdminvoterID;\\r\\n        } else if (bytes(admin[msg.sender].RegisteredOrgID2).length == 0) {\\r\\n            admin[msg.sender].RegisteredOrgID2 = _orgID;\\r\\n            admin[msg.sender].AdminVoterIDOrg2 = UniqueAdminvoterID;\\r\\n        }\\r\\n\\r\\n        AdminInfo.electionAdminAddress = msg.sender;\\r\\n        AdminInfo.adminName = bytes32(abi.encodePacked(_adminName));\\r\\n        AdminInfo.isRegistered = true;\\r\\n        ++AdminInfo.adminOrgCount;\\r\\n\\r\\n        registeredAdmin[msg.sender] = true;\\r\\n        votersIDExists[UniqueAdminvoterID] = true;\\r\\n\\r\\n        AdminInfo.nextOrgCreationBlock = 50 + block.number;\\r\\n\\r\\n        ++organizationsCounter;\\r\\n        ++VotreXUserCounter;\\r\\n\\r\\n        TxInterface.VotreXTx(msg.sender, VXTAmount);\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    function registerVoter(\\r\\n        string memory _voterName,\\r\\n        string memory _orgID\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        onlyWhenActivated\\r\\n    {\\r\\n        require(\\r\\n            msg.value == (OrganizationPriceFee/2)\\r\\n        );\\r\\n\\r\\n        Voter storage voter = voters[msg.sender];\\r\\n        uint8 VXTAmount = 5;\\r\\n        string memory uniqueVoterID = generateUniqueVoterID(_orgID);\\r\\n        bytes16 VoterID16 = bytes16(abi.encodePacked(uniqueVoterID));\\r\\n        bytes32 orgIDs = keccak256(abi.encodePacked(_orgID));\\r\\n\\r\\n        require(\\r\\n            organizationData[_orgID].totalMembers < 5000,\\r\\n            \\\"Maximum member limit reached\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            bytes(_voterName).length > 1,\\r\\n            \\\"Please fill Voter Name\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            bytes(_voterName).length < 24,\\r\\n            \\\"Voter name over than 24 characters\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID1))\\r\\n            !=\\r\\n            keccak256(abi.encodePacked(_orgID))\\r\\n            &&\\r\\n            keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID2))\\r\\n            !=\\r\\n            keccak256(abi.encodePacked(_orgID))\\r\\n            &&\\r\\n            !registeredAdmin[msg.sender],\\r\\n            \\\"Voter is registered in Org\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            !ElectionActiveCheck(orgIDs),\\r\\n            \\\"Election in progress!\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            bytes(uniqueVoterID).length > 0,\\r\\n            \\\"Failed to generate unique Voter ID\\\"\\r\\n        );\\r\\n\\r\\n        if (bytes(voter.RegisteredOrgID1).length == 0) {\\r\\n            voter.RegisteredOrgID1 = _orgID;\\r\\n            voter.VoterIDOrg1 = VoterID16;\\r\\n        } else if (bytes(voter.RegisteredOrgID2).length == 0) {\\r\\n            voter.RegisteredOrgID2 = _orgID;\\r\\n            voter.VoterIDOrg2 = VoterID16;\\r\\n        }\\r\\n\\r\\n        voter.VoterAddress = msg.sender;\\r\\n        voter.VoterName = _voterName;\\r\\n        voter.participatedElectionEvents = new string[](0);\\r\\n        voter.isRegistered = true;\\r\\n        votersIDExists[VoterID16] = true;\\r\\n        ++VotreXUserCounter;\\r\\n\\r\\n        TxInterface.VotreXTx(msg.sender, VXTAmount);\\r\\n    }\\r\\n\\r\\n    function createElection(\\r\\n        string memory _orgID,\\r\\n        string memory _userElectionID,\\r\\n        string memory _electionName,\\r\\n        uint8 _candidateCount\\r\\n    )\\r\\n        external\\r\\n        onlyWhenActivated\\r\\n        onlyOrgAdmin(_orgID)\\r\\n    {\\r\\n        require(\\r\\n            bytes(organizationData[_orgID].orgID).length > 0,\\r\\n            \\\"Org ID not found\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            bytes(_userElectionID).length > 1,\\r\\n            \\\"ID can't be empty\\\"\\r\\n        \\r\\n        );\\r\\n\\r\\n        require(\\r\\n            bytes(_userElectionID).length < 5,\\r\\n            \\\"ID should < 5 characters\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            bytes(_electionName).length > 1,\\r\\n            \\\"Please fill name\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            bytes(_electionName).length < 25,\\r\\n            \\\"Election name should < 25\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            organizationData[_orgID].electionEventCounter < 10,\\r\\n            \\\"Maximum events reached\\\"\\r\\n        );\\r\\n\\r\\n        require(_candidateCount > 1, \\\"Minimum 2 candidates!\\\");\\r\\n\\r\\n        bytes32 generatedElectionID = bytes32(abi.encodePacked(_orgID, \\\"-\\\", _userElectionID));\\r\\n        ElectionDetail storage newElection = electionInfo[generatedElectionID];\\r\\n\\r\\n        require(\\r\\n            !electionExistanceChecks[generatedElectionID],\\r\\n            \\\"Election ID exists\\\"\\r\\n        );\\r\\n\\r\\n        newElection.orgID = _orgID;\\r\\n        newElection.electionID = generatedElectionID;\\r\\n        newElection.electionName = bytes32(abi.encodePacked(_electionName));\\r\\n        newElection.candidateList = _candidateCount;\\r\\n        newElection.status = ElectionStatus.Preparation;\\r\\n        electionExistanceChecks[generatedElectionID] = true;\\r\\n        ++organizationData[_orgID].electionEventCounter;\\r\\n    }\\r\\n\\r\\n    function startElection(string memory _userElectionID) external onlyOrgAdmin(_userElectionID){\\r\\n        require(bytes(_userElectionID).length > 0, \\\"Election ID can't be empty\\\");\\r\\n\\r\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\r\\n        bytes32 orgIDs = keccak256(abi.encodePacked(UtilityLibrary.extractOrgId(_userElectionID)));\\r\\n\\r\\n        ElectionDetail storage election = electionInfo[userElectionID];\\r\\n        require(bytes16(election.electionID).length > 0, \\\"Election ID does not exist\\\");\\r\\n        require(election.status == ElectionStatus.Preparation, \\\"Election is not in preparation\\\");\\r\\n        require(election.candidateList == election.candidates.length, \\\"Candidate Not full\\\");\\r\\n\\r\\n        election.startTime = 5 + block.timestamp;\\r\\n        election.status = ElectionStatus.Started;\\r\\n        activeElection[orgIDs].orgID = orgIDs;\\r\\n        activeElection[orgIDs].activeElectionID = userElectionID;\\r\\n    }\\r\\n\\r\\n    function finishElection(string memory _userElectionID)\\r\\n        external\\r\\n        onlyOrgAdmin(_userElectionID)\\r\\n    {\\r\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\r\\n        ElectionDetail storage elections = electionInfo[userElectionID];\\r\\n        string memory orgName = string(abi.encodePacked(organizationData[elections.orgID].orgName));\\r\\n        bytes32 orgIDs = keccak256(abi.encodePacked(UtilityLibrary.extractOrgId(_userElectionID)));\\r\\n        string memory adminName = getAdminName(msg.sender);\\r\\n        string memory electionName = string(abi.encodePacked(elections.electionName));\\r\\n        string memory electionWinner = determineWinner(_userElectionID);\\r\\n        uint256 totalVoter = calculateTotalVoter(_userElectionID);\\r\\n        bytes32 dataHash = bytes32(keccak256(abi.encodePacked(orgName, electionName, adminName)));\\r\\n\\r\\n        require(\\r\\n            bytes(_userElectionID).length > 0,\\r\\n            \\\"Invalid election ID\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            bytes(_userElectionID).length > 0,\\r\\n            \\\"Election ID can't be empty\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            bytes32(electionInfo[userElectionID].electionID).length > 0,\\r\\n            \\\"Election ID does not exist\\\"\\r\\n        );\\r\\n\\r\\n        require(!elections.isFinished, \\\"Election finished\\\");\\r\\n\\r\\n        require(\\r\\n            elections.status == ElectionStatus.Started,\\r\\n            \\\"Election is not started\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            totalVoter >= calculateValidElection(_userElectionID),\\r\\n            \\\"need 50% total member to finish\\\"\\r\\n        );\\r\\n\\r\\n        elections.endTime = 5+block.timestamp;\\r\\n        elections.status = ElectionStatus.Finished;\\r\\n        elections.isFinished = true;\\r\\n\\r\\n        ElectionResult storage newelectionResult = electionResults[_userElectionID];\\r\\n        newelectionResult.isPruned = true;\\r\\n        newelectionResult.totalVoter = totalVoter;\\r\\n        newelectionResult.adminAddress = msg.sender;\\r\\n        newelectionResult.startTime = elections.startTime;\\r\\n        newelectionResult.endTime = elections.endTime;\\r\\n        newelectionResult.digitalSignature = dataHash;\\r\\n        newelectionResult.registeredOrganization = elections.orgID;\\r\\n        newelectionResult.electionName = elections.electionName;\\r\\n        newelectionResult.electionWinner = electionWinner;\\r\\n        newelectionResult.signedBy = adminName;\\r\\n        removeFromActiveElections(orgIDs);\\r\\n\\r\\n        delete electionInfo[userElectionID];\\r\\n    }\\r\\n\\r\\n    function calculateValidElection(string memory _userElectionID)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        string memory orgID = UtilityLibrary.extractOrgId(_userElectionID);\\r\\n        Organization storage OrgData = organizationData[orgID];\\r\\n        uint256 MIN_VOTES_PERCENTAGE = 1 + (OrgData.totalMembers / 2);\\r\\n\\r\\n        return MIN_VOTES_PERCENTAGE;\\r\\n    }\\r\\n\\r\\n    function getOwnerAddress() external view returns (address) {\\r\\n        return VotreXOwnerAddress;\\r\\n    }\\r\\n\\r\\n    function getOwnerName() external view returns (bytes32) {\\r\\n        return VotreXOwnerName;\\r\\n    }\\r\\n\\r\\n    // function getTotalOrg()external view returns (uint256) {\\r\\n    //     return organizationsCounter;\\r\\n    // }\\r\\n\\r\\n    function getTotalUser() external view returns (uint256) {\\r\\n        return VotreXUserCounter;\\r\\n    }\\r\\n\\r\\n    function getAdminName(address adminAddress) private view returns (string memory) {\\r\\n        return string(abi.encodePacked(admin[adminAddress].adminName));\\r\\n    }\\r\\n\\r\\n    function addCandidateDetail(\\r\\n        string memory _userElectionID,\\r\\n        string memory _candidateName\\r\\n    )\\r\\n        external\\r\\n        onlyOrgAdmin(_userElectionID)\\r\\n    {\\r\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\r\\n        ElectionDetail storage election = electionInfo[userElectionID];\\r\\n\\r\\n        require(bytes(_userElectionID).length > 0);\\r\\n\\r\\n        require(\\r\\n            bytes32(electionInfo[userElectionID].electionID).length > 0,\\r\\n            \\\"Election ID does not exist\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            election.candidates.length < election.candidateList,\\r\\n            \\\"Candidate limit reached\\\"\\r\\n        );\\r\\n\\r\\n        require(bytes(_candidateName).length > 0);\\r\\n\\r\\n        require(\\r\\n            bytes(_candidateName).length <= 24,\\r\\n            \\\"name limits 24 characters\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            UtilityLibrary.onlyAlphanumericCharacters(_candidateName),\\r\\n            \\\"Candidate name can only contain alphabetical\\\"\\r\\n        );\\r\\n\\r\\n        uint8 candidateID = uint8(election.candidates.length);\\r\\n\\r\\n        election.candidates.push(\\r\\n            CandidateDetail({\\r\\n                candidateID: candidateID,\\r\\n                candidateName: _candidateName,\\r\\n                candidateVoteCount: 0\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function vote(\\r\\n        string memory _userElectionID,\\r\\n        uint8 candidateID, uint256 VotesAmount\\r\\n    )\\r\\n        external\\r\\n        onlyWhenActivated\\r\\n        onlyAuthorizedMember(_userElectionID)\\r\\n    {\\r\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\r\\n        ElectionDetail storage election = electionInfo[userElectionID];\\r\\n        Voter storage voter = voters[msg.sender];\\r\\n        bytes32 electionName = election.electionName;\\r\\n        require(VotesAmount <= 5);\\r\\n        require(bytes(_userElectionID).length > 0, \\\"Election ID can't be empty\\\");\\r\\n        require(candidateID < election.candidates.length, \\\"Invalid candidate ID\\\");\\r\\n        require(election.status == ElectionStatus.Started, \\\"Election is not in progress\\\");\\r\\n        require(!hasParticipatedInElection(msg.sender, electionName), \\\"You already voted in this election\\\");\\r\\n\\r\\n        ++election.candidates[candidateID].candidateVoteCount;\\r\\n        election.candidates[candidateID].candidateVoteCount += VotesAmount;\\r\\n        voter.participatedElectionEvents = UtilityLibrary.appendToStringArray(\\r\\n            voter.participatedElectionEvents,\\r\\n            string(abi.encodePacked(election.electionName))\\r\\n        );\\r\\n        TxInterface.VoteTx(msg.sender, VotesAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdrawFees(uint8 VXTAmount) external onlyVotreXOwner{\\r\\n        payable(VotreXOwnerAddress).transfer(address(this).balance);\\r\\n        TxInterface.VotreXTx(msg.sender, VXTAmount);\\r\\n    }\\r\\n\\r\\n    function isVotreXActivated() external onlyVotreXOwner view returns (bool) {\\r\\n        return VotreXActivated;\\r\\n    }\\r\\n\\r\\n    function getRegistrationFee() external view returns (uint256){\\r\\n        return OrganizationPriceFee;\\r\\n    }\\r\\n\\r\\n    // function getTotalOrganization() external virtual view returns (uint256) {\\r\\n    //     return organizationsCounter;\\r\\n    // }\\r\\n\\r\\n    function getCandidateDetail(\\r\\n        string memory _userElectionID,\\r\\n        string memory _candidateName\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns(\\r\\n            bool success,\\r\\n            string memory candidateName,\\r\\n            uint8 candidateID,\\r\\n            uint256 voteCount\\r\\n        )\\r\\n    {\\r\\n        require(\\r\\n            bytes(_userElectionID).length > 0,\\r\\n            \\\"Election ID can't be empty\\\"\\r\\n        );\\r\\n\\r\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\r\\n        ElectionDetail storage election = electionInfo[userElectionID];\\r\\n\\r\\n        for (uint32 i = 0; i < election.candidates.length; ++i) {\\r\\n            if (\\r\\n                keccak256(abi.encodePacked(election.candidates[i].candidateName))\\r\\n                ==\\r\\n                keccak256(abi.encodePacked(_candidateName))\\r\\n            ) {\\r\\n                return (\\r\\n                    true,\\r\\n                    election.candidates[i].candidateName,\\r\\n                    election.candidates[i].candidateID,\\r\\n                    election.candidates[i].candidateVoteCount\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (false,'', 0, 0);\\r\\n\\r\\n    }\\r\\n\\r\\n    function getelectionInfo(string memory _userElectionID)\\r\\n        external\\r\\n        view\\r\\n        returns(\\r\\n            bytes32 electionID,\\r\\n            string memory electionName,\\r\\n            uint256 totalCandidates,\\r\\n            string[] memory candidateNames,\\r\\n            uint[] memory voteCounts\\r\\n        )\\r\\n    {\\r\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\r\\n\\r\\n        ElectionDetail storage election = electionInfo[userElectionID];\\r\\n        require(\\r\\n            bytes32(election.electionID).length > 0,\\r\\n            \\\"Election ID does not exist\\\"\\r\\n        );\\r\\n\\r\\n        electionID = election.electionID;\\r\\n        electionName = string(abi.encodePacked (election.electionName));\\r\\n        totalCandidates = election.candidates.length;\\r\\n        candidateNames = new string[](totalCandidates);\\r\\n        voteCounts = new uint[](totalCandidates);\\r\\n\\r\\n        for (uint256 i = 0; i < totalCandidates; ++i) {\\r\\n            candidateNames[i] = election.candidates[i].candidateName;\\r\\n            voteCounts[i] = election.candidates[i].candidateVoteCount;\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            electionID,\\r\\n            electionName,\\r\\n            totalCandidates,\\r\\n            candidateNames, voteCounts\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getCurrentVoteResult(string memory _userElectionID)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            CandidateDetail[] memory\\r\\n        )\\r\\n    {\\r\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\r\\n        ElectionDetail storage election = electionInfo[userElectionID];\\r\\n\\r\\n        require(bytes(_userElectionID).length > 0, \\\"Election ID can't be empty\\\");\\r\\n\\r\\n        require(election.status == ElectionStatus.Started, \\\"Election is not in progress\\\");\\r\\n\\r\\n        return election.candidates;\\r\\n    }\\r\\n\\r\\n    function getUserInfo() external view returns (\\r\\n        bool isRegistered,\\r\\n        address userAddress,\\r\\n        string memory userName,\\r\\n        string[] memory registeredOrgList,\\r\\n        string[] memory voterIDList,\\r\\n        string[] memory participatedElectionEvents\\r\\n    ) {\\r\\n        userAddress = msg.sender;\\r\\n\\r\\n        if (admin[userAddress].isRegistered) {\\r\\n            ElectionAdmins storage adminInfo = admin[userAddress];\\r\\n            \\r\\n            string[] memory VoterRegisteredOrgList = new string[](2);\\r\\n            VoterRegisteredOrgList[0] = adminInfo.RegisteredOrgID1;\\r\\n            VoterRegisteredOrgList[1] = adminInfo.RegisteredOrgID2;\\r\\n\\r\\n            string[] memory VoterIDList = new string[](2);\\r\\n            VoterIDList[0] = string(abi.encodePacked(adminInfo.AdminVoterIDOrg1));\\r\\n            VoterIDList[1] = string(abi.encodePacked(adminInfo.AdminVoterIDOrg2));\\r\\n\\r\\n            return (\\r\\n                true,\\r\\n                userAddress,\\r\\n                string(abi.encodePacked(adminInfo.adminName)),\\r\\n                VoterRegisteredOrgList,\\r\\n                VoterIDList,\\r\\n                new string[](0)\\r\\n            );\\r\\n\\r\\n        } else if (voters[userAddress].isRegistered) {\\r\\n            Voter storage voter = voters[userAddress];\\r\\n\\r\\n            string[] memory RegisteredOrgIDList = new string[](2);\\r\\n            RegisteredOrgIDList[0] = voter.RegisteredOrgID1;\\r\\n            RegisteredOrgIDList[1] = voter.RegisteredOrgID2;\\r\\n\\r\\n            string[] memory RegisteredVoterIDList = new string[](2);\\r\\n            RegisteredVoterIDList[0] = string(abi.encodePacked(voter.VoterIDOrg1));\\r\\n            RegisteredVoterIDList[1] = string(abi.encodePacked(voter.VoterIDOrg2));\\r\\n            return (\\r\\n                true,\\r\\n                userAddress,\\r\\n                voter.VoterName,\\r\\n                RegisteredOrgIDList,\\r\\n                RegisteredVoterIDList,\\r\\n                voter.participatedElectionEvents\\r\\n            );\\r\\n        } else {\\r\\n            return (\\r\\n                false,\\r\\n                userAddress,\\r\\n                \\\"\\\",\\r\\n                new string[](0),\\r\\n                new string[](0),\\r\\n                new string[](0)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function ElectionActiveCheck(bytes32 _orgID) private view returns (bool) {\\r\\n\\r\\n        return activeElection[_orgID].activeElectionID != 0;\\r\\n\\r\\n    }\\r\\n\\r\\n    function removeFromActiveElections(bytes32 _orgID) private {\\r\\n        delete activeElection[_orgID];\\r\\n    }\\r\\n\\r\\n    function hasParticipatedInElection(\\r\\n        address voterAddress,\\r\\n        bytes32 electionName\\r\\n    )\\r\\n        private\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        Voter storage voter = voters[voterAddress];\\r\\n        for (uint i = 0; i < voter.participatedElectionEvents.length; ++i) {\\r\\n            if (\\r\\n                keccak256(abi.encodePacked(voter.participatedElectionEvents[i]))\\r\\n                ==\\r\\n                keccak256(abi.encodePacked(electionName))\\r\\n            ) {\\r\\n                return true; \\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false; \\r\\n    }\\r\\n\\r\\n    function calculateTotalVoter(string memory _userElectionID) private view returns (uint256) {\\r\\n        bytes8 userElectionID = bytes8(abi.encodePacked(_userElectionID));\\r\\n        ElectionDetail storage election = electionInfo[userElectionID];\\r\\n        uint256 totalVoter = 0;\\r\\n\\r\\n        for (uint8 i = 0; i < election.candidates.length; ++i) {\\r\\n            totalVoter += election.candidates[i].candidateVoteCount;\\r\\n        }\\r\\n\\r\\n        return totalVoter;\\r\\n    }\\r\\n\\r\\n    function determineWinner(string memory _userElectionID) private view returns (string memory) {\\r\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\r\\n        ElectionDetail storage election = electionInfo[userElectionID];\\r\\n        string memory winner = \\\"\\\";\\r\\n        uint256 maxVotes = 0;\\r\\n        for (uint8 i = 0; i < election.candidates.length; ++i) {\\r\\n            if (election.candidates[i].candidateVoteCount > maxVotes) {\\r\\n                maxVotes = election.candidates[i].candidateVoteCount;\\r\\n                winner = election.candidates[i].candidateName;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return winner;\\r\\n    }\\r\\n    \\r\\n    function generateUniqueVoterID(string memory _orgID) public view returns (string memory) {\\r\\n        uint256 CurrentID = organizationData[_orgID].totalMembers;\\r\\n        uint256 nextID = ++CurrentID;\\r\\n\\r\\n        return string(abi.encodePacked(_orgID, \\\"-\\\", UtilityLibrary.uint2str(nextID)));\\r\\n    }\\r\\n\\r\\n    function getOrgIDHash(string memory _orgID) external pure returns (bytes32) {\\r\\n        bytes32 orgIDHash = keccak256(abi.encodePacked(_orgID));\\r\\n\\r\\n        return (orgIDHash);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x213e27e71b17a1b69053508bad15dbdeb5b5f8bb63f45c28e624116473709785\",\"license\":\"MIT\"},\"contracts/UtilityLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >0.7.0;\\r\\n\\r\\nlibrary UtilityLibrary{\\r\\n\\r\\n    function extractOrgId(string memory _userElectionID) internal pure returns (string memory) {\\r\\n        string[] memory parts = UtilityLibrary.splitString(_userElectionID, \\\"-\\\");\\r\\n        require(parts.length > 0, \\\"Invalid custom election ID format\\\");\\r\\n\\r\\n        return parts[0];\\r\\n    }\\r\\n\\r\\n    function decodeBytes10(bytes10 data) internal pure returns (string memory) {\\r\\n        string memory decodedString = new string(10);\\r\\n        \\r\\n        assembly {\\r\\n            mstore(add(decodedString, 32), data)\\r\\n        }\\r\\n\\r\\n        return decodedString;\\r\\n    }\\r\\n    \\r\\n    function arrayContains(string[] storage array, string memory element) internal view returns (bool) {\\r\\n        for (uint256 i = 0; i < array.length; ++i) {\\r\\n            if (keccak256(abi.encodePacked(array[i])) == keccak256(abi.encodePacked(element))) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n    \\r\\n    function onlyAlphanumericCharacters(string memory _input) internal pure returns (bool) {\\r\\n        bytes memory b = bytes(_input);\\r\\n        for (uint i = 0; i < b.length; ++i) {\\r\\n            if (!((uint8(b[i]) >= 48 && uint8(b[i]) <= 57) || // 0-9\\r\\n                (uint8(b[i]) >= 65 && uint8(b[i]) <= 90) || // A-Z\\r\\n                (uint8(b[i]) >= 97 && uint8(b[i]) <= 122))) { // a-z\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function appendToStringArray(string[] memory array, string memory newValue) internal pure returns (string[] memory) {\\r\\n        string[] memory newArray = new string[](array.length + 1);\\r\\n        \\r\\n        for (uint32 i = 0; i < array.length; ++i) {\\r\\n            newArray[i] = array[i];\\r\\n        }\\r\\n        \\r\\n        newArray[array.length] = newValue;\\r\\n        \\r\\n        return newArray;\\r\\n    }\\r\\n\\r\\n    function containsWhitespaceCheck(string memory _str) internal pure returns (bool) {\\r\\n        bytes memory strBytes = bytes(_str);\\r\\n\\r\\n        for (uint256 i = 0; i < strBytes.length; ++i) {\\r\\n            if (strBytes[i] == \\\" \\\") {\\r\\n                return true; \\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false; \\r\\n    }\\r\\n\\r\\n\\r\\n    function uintToString(uint48 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n\\r\\n        uint48 temp = value;\\r\\n        uint48 length;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n\\r\\n        bytes memory buffer = new bytes(length);\\r\\n        uint48 i = length - 1;\\r\\n        while (value != 0) {\\r\\n            buffer[i] = bytes1(uint8(48 + value % 10));\\r\\n            value /= 10;\\r\\n            i--;\\r\\n        }\\r\\n\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint j = _i;\\r\\n        uint len;\\r\\n        while (j != 0) {\\r\\n            ++len;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k-1;\\r\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n\\r\\n\\r\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\r\\n        return (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b)));\\r\\n    }\\r\\n\\r\\n    function splitString(string memory str, string memory delimiter) internal pure returns (string[] memory) {\\r\\n        bytes memory strBytes = bytes(str);\\r\\n        bytes memory delimiterBytes = bytes(delimiter);\\r\\n\\r\\n        uint delimiterCount = 1;\\r\\n        for (uint i = 0; i < strBytes.length; ++i) {\\r\\n            if (strBytes[i] == delimiterBytes[0]) {\\r\\n                ++delimiterCount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        string[] memory parts = new string[](delimiterCount);\\r\\n\\r\\n        uint partStart = 0;\\r\\n        uint partIndex = 0;\\r\\n        for (uint i = 0; i < strBytes.length; ++i) {\\r\\n            if (strBytes[i] == delimiterBytes[0]) {\\r\\n                parts[partIndex] = substring(str, partStart, i);\\r\\n                partStart = i + 1;\\r\\n                partIndex++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Add the last part\\r\\n        parts[partIndex] = substring(str, partStart, strBytes.length);\\r\\n\\r\\n        return parts;\\r\\n    }\\r\\n\\r\\n    function substring(string memory str, uint startIndex, uint endIndex) internal pure returns (string memory) {\\r\\n        bytes memory strBytes = bytes(str);\\r\\n        require(startIndex <= endIndex && endIndex <= strBytes.length, \\\"Invalid substring indices\\\");\\r\\n\\r\\n        bytes memory result = new bytes(endIndex - startIndex);\\r\\n        for (uint i = startIndex; i < endIndex; ++i) {\\r\\n            result[i - startIndex] = strBytes[i];\\r\\n        }\\r\\n\\r\\n        return string(result);\\r\\n    }\\r\\n\\r\\n    function extractOrgIdFromElectionId(string memory _userElectionID) internal pure returns (string memory) {\\r\\n        bytes memory orgIdBytes = bytes(_userElectionID);\\r\\n\\r\\n        // Split the input string at the hyphen ('-')\\r\\n        uint8 i = 0;\\r\\n        while (i < orgIdBytes.length && orgIdBytes[i] != '-'){  // ASCII code for hyphen '-'\\r\\n            ++i;\\r\\n        }\\r\\n\\r\\n        // If a hyphen is found, extract the organization ID\\r\\n        if (i < orgIdBytes.length) {\\r\\n            bytes memory extractedBytes = new bytes(i);\\r\\n            for (uint8 j = 0; j < i; ++j) {\\r\\n                extractedBytes[j] = orgIdBytes[j];\\r\\n            }\\r\\n            return string(extractedBytes);\\r\\n        }\\r\\n\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function concat(string memory _a, string memory _b) internal pure returns (string memory) {\\r\\n        return string(abi.encodePacked(bytes(_a), bytes(_b)));\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x6531b056194597f3b3493a9df87cc1e4b8b8668d44d1e73f7344a177a763528f\",\"license\":\"MIT\"},\"contracts/VotreXToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// Useful for debugging. Remove when deploying to a live network.\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n// import \\\"../node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\\\";\\n// VotreX-Token\\\\node_modules\\\\@openzeppelin\\\\contracts\\\\token\\\\ERC20\\\\extensions\\\\ERC20Permit.sol\\n// import \\\"@openzeppelin/contracts@5.0.1/access/Ownable.sol\\\";\\n\\ncontract VotreXToken is ERC20, ERC20Burnable, ERC20Pausable {\\n    constructor(uint256 _initialMintedToken, uint256 _MaxSupplies)\\n        ERC20(\\\"VotreXToken\\\", \\\"VOX\\\")\\n    {\\n        Owner = msg.sender;\\n        MAXSupply = _MaxSupplies * 10 ** decimals();\\n        _mint(address(this),  _initialMintedToken * 10 ** decimals());\\n        // _approve(msg.sender, address(this), _initialMintedToken * 10 ** decimals());\\n        activeSystem = true;\\n        currentMintAmount = (_MaxSupplies - _initialMintedToken) * 10 ** decimals();\\n    }\\n\\n    address private Owner;\\n    bool private activeSystem;\\n    uint256 public immutable MAXSupply;\\n    uint256 private currentMintAmount;\\n\\n    mapping (address Owner => IContract) private ContractStorage;\\n\\n    struct IContract{\\n        address Authorized;\\n        address stakingContract;\\n        address dexContract;\\n        address VotreXContract;\\n        address interfaceContract;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == Owner, \\\"Caller is not an Owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyInterface() {\\n        require(\\n            msg.sender == ContractStorage[Owner].interfaceContract, \\\"Caller is not an interface\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyExecutor(){\\n        require(msg.sender == ContractStorage[Owner].Authorized);\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(\\n            msg.sender == ContractStorage[Owner].interfaceContract ||\\n            msg.sender == Owner, \\\"Token - Caller is not an Authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyPaused() {\\n        require(\\n            activeSystem == false, \\\"System still active\\\"\\n        );\\n        _;\\n    }\\n\\n    function customApprove(address owner, address spender, uint256 amount) external onlyInterface {\\n        _approve(owner, spender, amount);\\n    }\\n\\n    function pause() public onlyOwner {\\n        require(activeSystem == true, \\\"System is Paused\\\");\\n        _pause();\\n        activeSystem = false;\\n    }\\n\\n    function Activate() public onlyOwner {\\n        require(activeSystem == false, \\\"System is Activated\\\");\\n        _unpause();\\n        activeSystem = true;\\n    }\\n\\n    function setAutomationExecutor(address _executorAddress) external onlyOwner onlyPaused {\\n        require(\\n            _executorAddress != address(0),\\n            \\\"Invalid contract address\\\"\\n        );\\n        require(\\n            _executorAddress != ContractStorage[msg.sender].Authorized,\\n            \\\"Already Registered Executor\\\"\\n        );\\n        ContractStorage[msg.sender].Authorized = _executorAddress;\\n    }\\n\\n    function setStakingContract(address _stakingContractAddress) external onlyOwner onlyPaused {\\n        require(\\n            _stakingContractAddress != address(0),\\n            \\\"Invalid contract address\\\"\\n        );\\n        require(\\n            _stakingContractAddress != ContractStorage[msg.sender].stakingContract,\\n            \\\"Already Registered Staking\\\"\\n        );\\n        ContractStorage[msg.sender].stakingContract = _stakingContractAddress;\\n    }\\n\\n    function setDexContract(address _DEXContractAddress) external onlyOwner onlyPaused {\\n        require(\\n            _DEXContractAddress != address(0),\\n            \\\"Invalid contract address\\\"\\n        );\\n        require(\\n            _DEXContractAddress != ContractStorage[msg.sender].dexContract,\\n            \\\"Already Registered DEX\\\"\\n        );\\n        ContractStorage[msg.sender].dexContract = _DEXContractAddress;\\n    }\\n\\n    function setInterface(address _InterfaceContractAddress) external onlyOwner onlyPaused {\\n        require(\\n            _InterfaceContractAddress != address(0),\\n            \\\"Invalid contract address\\\"\\n        );\\n        require(\\n            _InterfaceContractAddress != ContractStorage[msg.sender].interfaceContract,\\n            \\\"Already Registered Interface\\\"\\n        );\\n        ContractStorage[msg.sender].interfaceContract = _InterfaceContractAddress;\\n    }\\n\\n    function setVotreXContract(address _VotreXContractAddress) external onlyOwner onlyPaused {\\n        require(\\n            _VotreXContractAddress != address(0),\\n            \\\"Invalid contract address\\\"\\n        );\\n        require(\\n            _VotreXContractAddress != ContractStorage[msg.sender].VotreXContract,\\n            \\\"Already Registered VotreX\\\"\\n        );\\n        ContractStorage[msg.sender].VotreXContract = _VotreXContractAddress;\\n    }\\n\\n    function checkBlockTime() public view returns(uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function calculateHalving() public view returns (uint256) {\\n        uint256 nextMint = currentMintAmount / 2;\\n\\n        return nextMint;\\n    }\\n\\n    function autoMinting() public onlyExecutor{\\n        require(totalSupply() < MAXSupply, \\\"Max Supply Reached\\\");\\n\\n        if (currentMintAmount == 0) {\\n            uint256 finalMintingValue = MAXSupply - totalSupply() ;\\n            _mint(address(this), finalMintingValue);\\n        } else {\\n            uint256 mintingValue = calculateHalving();\\n            _mint(address(this), mintingValue);\\n            currentMintAmount = mintingValue;\\n\\n        }\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyAuthorized {\\n        if (msg.sender == ContractStorage[Owner].interfaceContract) {\\n            require(totalSupply() < MAXSupply);\\n            _mint(to, amount);\\n        } else if (msg.sender == Owner) {\\n            uint256 mintingValue = amount * 10**decimals();\\n            require(totalSupply() < MAXSupply);\\n            require(amount < 4000000);\\n            _mint(to, mintingValue);\\n            currentMintAmount =  currentMintAmount / 2;\\n        }\\n    }\\n\\n    function burn(uint256 value) public onlyOwner override {\\n        uint256 burnedValue = value * 10**decimals();\\n        _burn(address(this), burnedValue);\\n    }\\n\\n    function getCurrentMintAmount() external view returns(uint256){\\n        return currentMintAmount;\\n    }\\n\\n    function getContractStorage()\\n        external\\n        view\\n        onlyOwner()\\n        returns(\\n            address,\\n            address,\\n            address,\\n            address,\\n            address\\n        ){\\n            return(\\n                ContractStorage[msg.sender].Authorized,\\n                ContractStorage[msg.sender].stakingContract,\\n                ContractStorage[msg.sender].dexContract,\\n                ContractStorage[msg.sender].VotreXContract,\\n                ContractStorage[msg.sender].interfaceContract\\n            );\\n    }\\n\\n    function getOwnerAddress() external view onlyOwner returns(address) {\\n        return(Owner);\\n    }\\n\\n    function _update(address from, address to, uint256 value)\\n        internal\\n        override(ERC20, ERC20Pausable)\\n    {\\n        super._update(from, to, value);\\n    }\\n\\n}\",\"keccak256\":\"0x540c831b4f1a731db04dc841b4790c179263562a676c8a32689679617d937651\",\"license\":\"MIT\"},\"contracts/VotreXTxInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"./VotreXToken.sol\\\";\\r\\n\\r\\ncontract VotreXTXInterface {\\r\\n\\r\\n    constructor(address _tokenAddress) {\\r\\n        InterfaceMaster = msg.sender;\\r\\n        interfaceActivated = false;\\r\\n        vxtToken = VotreXToken(_tokenAddress);\\r\\n        ContractStorage[msg.sender].tokenContract = _tokenAddress;\\r\\n    }\\r\\n\\r\\n    // gas: 646200;\\r\\n\\r\\n    VotreXToken internal immutable vxtToken;\\r\\n    bool private interfaceActivated;\\r\\n    address private VotreXContract;\\r\\n    address private dexContract;\\r\\n    address private airdropContract;\\r\\n    address private stakingContract;\\r\\n    address private immutable InterfaceMaster;\\r\\n    uint256 internal immutable MaxAllowances = 15000000 * 10 ** 18;\\r\\n\\r\\n    mapping(address InterfaceMaster => IContract) private ContractStorage;\\r\\n    // mapping(address => uint256) public allowances;\\r\\n\\r\\n    struct IContract{\\r\\n        address Authorized;\\r\\n        address tokenContract;\\r\\n        address stakingContract;\\r\\n        address dexContract;\\r\\n        address VotreXContract;\\r\\n        address airdropContract;\\r\\n    }\\r\\n\\r\\n    modifier onlyActivated() {\\r\\n        require(interfaceActivated == true, \\\"Interface not Active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPaused() {\\r\\n        require(interfaceActivated == false, \\\"Interface still Active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyStaking() {\\r\\n        require(\\r\\n            msg.sender == stakingContract,\\r\\n            \\\"Interface - Caller is not a Stake Contract\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == InterfaceMaster, \\\"Interface - Caller is not Owner!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyDeX() {\\r\\n        require(msg.sender == dexContract, \\\"Interface - Caller is not DexApps!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAuthorized() {\\r\\n        require(\\r\\n            msg.sender == dexContract ||\\r\\n            msg.sender == stakingContract ||\\r\\n            msg.sender == VotreXContract ||\\r\\n            msg.sender == airdropContract,\\r\\n            \\\"Interface - Caller is not an Authorized!\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event BuyVXTEvent(address Buyer, uint256 VXTTransfered);\\r\\n    event TransferedVXTEvent(address Receiver, uint256 VXTTransfered);\\r\\n    event withdrawnToken(address from, address Receiver, uint256 VXTTransfered);\\r\\n    event VotedEvent(address Voter, uint256 VotedPower);\\r\\n    event TokenDropped(address Recipient, uint256 DroppedValue);\\r\\n\\r\\n    function changeSystemState() external onlyOwner{\\r\\n\\r\\n        if (interfaceActivated == false) {\\r\\n            interfaceActivated = true;\\r\\n        } else if (interfaceActivated == true) {\\r\\n            interfaceActivated = false;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function isActivatedInterfaceCheck() public view returns (bool isActivatedInterface) {\\r\\n\\r\\n        return interfaceActivated;\\r\\n    }\\r\\n\\r\\n    function getTokenContract() external view onlyOwner returns(address){\\r\\n        return ContractStorage[msg.sender].tokenContract;\\r\\n    }\\r\\n    \\r\\n    function getContracStorages()\\r\\n        external\\r\\n        view\\r\\n        onlyOwner\\r\\n        returns(\\r\\n            address,\\r\\n            address,\\r\\n            address,\\r\\n            address,\\r\\n            address,\\r\\n            address \\r\\n        ){\\r\\n            return(\\r\\n                ContractStorage[msg.sender].Authorized,\\r\\n                ContractStorage[msg.sender].tokenContract,\\r\\n                ContractStorage[msg.sender].stakingContract,\\r\\n                ContractStorage[msg.sender].dexContract,\\r\\n                ContractStorage[msg.sender].VotreXContract,\\r\\n                ContractStorage[msg.sender].airdropContract\\r\\n            );  \\r\\n    }\\r\\n\\r\\n    function setVotreXSys (address _VotreXContract) external onlyOwner onlyPaused{\\r\\n        require(\\r\\n            _VotreXContract != ContractStorage[msg.sender].VotreXContract,\\r\\n            \\\"Interface - Registered VotreX\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _VotreXContract != address(0),\\r\\n            \\\"Interface - Invalid contract address\\\"\\r\\n        );\\r\\n\\r\\n        VotreXContract = _VotreXContract;\\r\\n        ContractStorage[msg.sender].VotreXContract = _VotreXContract;\\r\\n    }\\r\\n\\r\\n    function setStakingContract (address _stakingAddress) external onlyOwner onlyPaused{\\r\\n        require(\\r\\n            _stakingAddress != ContractStorage[msg.sender].stakingContract,\\r\\n            \\\"Interface - Registered VotreX Staking\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _stakingAddress != address(0),\\r\\n            \\\"Interface - Invalid contract address\\\"\\r\\n        );\\r\\n\\r\\n        stakingContract = _stakingAddress;\\r\\n        ContractStorage[msg.sender].stakingContract = _stakingAddress;\\r\\n    }\\r\\n\\r\\n    function setDeX (address _dexContract) external onlyOwner onlyPaused{\\r\\n        require(\\r\\n            _dexContract != ContractStorage[msg.sender].dexContract,\\r\\n            \\\"Interface - Registered VotreX DeX\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _dexContract != address(0),\\r\\n            \\\"Invalid contract address\\\"\\r\\n        );\\r\\n\\r\\n        dexContract = _dexContract;\\r\\n        ContractStorage[msg.sender].dexContract = _dexContract;\\r\\n    }\\r\\n\\r\\n    function setAirdrop (address _AirdropContract) external onlyOwner onlyPaused{\\r\\n        require(\\r\\n            _AirdropContract != ContractStorage[msg.sender].airdropContract,\\r\\n            \\\"Interface - Registered VotreX Airdrop\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _AirdropContract != address(0),\\r\\n            \\\"Invalid contract address\\\"\\r\\n        );\\r\\n\\r\\n        airdropContract = _AirdropContract;\\r\\n        ContractStorage[msg.sender].airdropContract = _AirdropContract;\\r\\n    }\\r\\n\\r\\n    function approveTxInterface(uint32 amount) external onlyOwner {\\r\\n        uint256 TokenConversion = uint256(amount) * 10 ** vxtToken.decimals();\\r\\n\\r\\n        require(address(this) != address(0), \\\"Interface - Invalid address\\\");\\r\\n        require(TokenConversion < MaxAllowances, \\\"Can not approve more than limit\\\");\\r\\n\\r\\n        vxtToken.customApprove(address(vxtToken), address(this), TokenConversion);\\r\\n    }\\r\\n\\r\\n    function approveVotreX(uint256 amount) external onlyAuthorized onlyActivated{\\r\\n        uint256 TokenConversion = amount * 10 ** vxtToken.decimals();\\r\\n\\r\\n        require(msg.sender != address(0), \\\"Interface - VotreX Address not set\\\");\\r\\n        require(TokenConversion < MaxAllowances, \\\"Can not approve more than limit\\\");\\r\\n\\r\\n        vxtToken.customApprove(msg.sender, address(this), TokenConversion);\\r\\n    }\\r\\n\\r\\n    function approveAirdrop(uint256 amount) external onlyAuthorized onlyActivated{\\r\\n        uint256 TokenConversion = amount * 10 ** vxtToken.decimals();\\r\\n\\r\\n        require(address(this) != address(0), \\\"Interface - Invalid address\\\");\\r\\n        require(TokenConversion < MaxAllowances, \\\"Can not approve more than limit\\\");\\r\\n\\r\\n        vxtToken.customApprove(msg.sender, address(this), TokenConversion);\\r\\n    }\\r\\n\\r\\n    function approveStaking(uint256 amount) external onlyAuthorized onlyActivated{\\r\\n        uint256 TokenConversion = amount * 10 ** vxtToken.decimals();\\r\\n\\r\\n        require(msg.sender != address(0), \\\"Interface - Staking Address not set\\\");\\r\\n        require(amount < MaxAllowances, \\\"Interface - Can not approve more than limit\\\");\\r\\n\\r\\n        vxtToken.customApprove(msg.sender, address(this), TokenConversion);\\r\\n    }\\r\\n\\r\\n    function approveDeX(uint256 amount) external virtual onlyAuthorized onlyActivated{\\r\\n        uint256 TokenConversion = amount * 10 ** vxtToken.decimals();\\r\\n\\r\\n        require(msg.sender != address(0), \\\"Interface - DeX Address not set\\\");\\r\\n        require(TokenConversion < MaxAllowances, \\\"Interface - Can not approve more than limit\\\");\\r\\n\\r\\n        vxtToken.customApprove(msg.sender, address(this), TokenConversion);\\r\\n    }\\r\\n\\r\\n    function checkApprovalLimit(address _ContractAddress) external view returns (uint256){\\r\\n        if(_ContractAddress == ContractStorage[msg.sender].VotreXContract){\\r\\n            return (\\r\\n                vxtToken.allowance(\\r\\n                    ContractStorage[msg.sender].VotreXContract, address(this)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        else if(_ContractAddress == ContractStorage[msg.sender].dexContract){\\r\\n            return (\\r\\n                vxtToken.allowance(\\r\\n                    ContractStorage[msg.sender].dexContract, address(this)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        else if(_ContractAddress == ContractStorage[msg.sender].stakingContract){\\r\\n            return (\\r\\n                vxtToken.allowance(\\r\\n                    ContractStorage[msg.sender].stakingContract, address(this)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        else if(_ContractAddress == ContractStorage[msg.sender].airdropContract){\\r\\n            return (\\r\\n                vxtToken.allowance(\\r\\n                    ContractStorage[msg.sender].airdropContract, address(this)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        else {\\r\\n            return (404);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkBalance(address account) external view virtual onlyActivated returns (uint256) {\\r\\n        return vxtToken.balanceOf(account);\\r\\n    }\\r\\n\\r\\n    function balanceTx(address _Recipient, uint256 _value) external onlyOwner{\\r\\n        uint256 vxtNominalTransfer = _value * 10 ** vxtToken.decimals();\\r\\n\\r\\n        if (\\r\\n            _Recipient == ContractStorage[msg.sender].VotreXContract\\r\\n        ) {\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= vxtNominalTransfer\\r\\n            )\\r\\n            {\\r\\n                vxtToken.transferFrom(address(vxtToken), VotreXContract, vxtNominalTransfer);\\r\\n            } else {\\r\\n                vxtToken.customApprove(msg.sender, _Recipient, vxtNominalTransfer);\\r\\n                vxtToken.customApprove(msg.sender, address(this), vxtNominalTransfer);\\r\\n\\r\\n                vxtToken.transferFrom(address(vxtToken), VotreXContract, vxtNominalTransfer);\\r\\n            }\\r\\n        } else if (\\r\\n            _Recipient == ContractStorage[msg.sender].dexContract\\r\\n        ) {\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= vxtNominalTransfer\\r\\n            )\\r\\n            {\\r\\n                vxtToken.transferFrom(address(vxtToken),dexContract, vxtNominalTransfer);\\r\\n            }\\r\\n            else {\\r\\n                vxtToken.customApprove(msg.sender, _Recipient, vxtNominalTransfer);\\r\\n                vxtToken.customApprove(msg.sender, address(this), vxtNominalTransfer);\\r\\n\\r\\n                vxtToken.transferFrom(address(vxtToken), dexContract, vxtNominalTransfer);\\r\\n            }\\r\\n        } else if (_Recipient == InterfaceMaster) {\\r\\n            require(_value < 4000000, \\\"Interface - Transfer limit Reached\\\");\\r\\n            require(msg.sender == InterfaceMaster, \\\"Interface - Not Authorized\\\");\\r\\n\\r\\n            // Case for Interface Master\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= vxtNominalTransfer\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n            ){\\r\\n                vxtToken.transferFrom(address(vxtToken), address(InterfaceMaster), vxtNominalTransfer);\\r\\n            } else {\\r\\n                vxtToken.customApprove(address(vxtToken), address(this), vxtNominalTransfer);\\r\\n                vxtToken.customApprove(address(vxtToken), InterfaceMaster, vxtNominalTransfer);\\r\\n\\r\\n                vxtToken.transferFrom(address(vxtToken), msg.sender, vxtNominalTransfer);\\r\\n\\r\\n                emit TransferedVXTEvent(msg.sender, vxtNominalTransfer);\\r\\n            }\\r\\n        }else if (\\r\\n            _Recipient != InterfaceMaster||\\r\\n            _Recipient != ContractStorage[msg.sender].dexContract ||\\r\\n            _Recipient != ContractStorage[msg.sender].VotreXContract\\r\\n        ){\\r\\n            revert();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function VotreXTx(\\r\\n        address _Recipient,\\r\\n        uint256 _value\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        onlyAuthorized\\r\\n        onlyActivated\\r\\n    {\\r\\n        uint256 vxtNominalTransfer = _value * 10 ** vxtToken.decimals();\\r\\n\\r\\n        if (msg.sender == VotreXContract) {\\r\\n            // Case for VotreX\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= vxtNominalTransfer\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n            )\\r\\n            {\\r\\n                vxtToken.transferFrom(_Recipient, msg.sender, vxtNominalTransfer);\\r\\n            }\\r\\n            else {\\r\\n                vxtToken.customApprove(msg.sender, _Recipient, vxtNominalTransfer);\\r\\n                vxtToken.customApprove(msg.sender, address(this), vxtNominalTransfer);\\r\\n                vxtToken.customApprove(_Recipient, address(this), vxtNominalTransfer);\\r\\n\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, vxtNominalTransfer);\\r\\n\\r\\n                emit TransferedVXTEvent(msg.sender, vxtNominalTransfer);\\r\\n            }\\r\\n        } else if (msg.sender == dexContract) {\\r\\n            // Case for DeX\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= _value\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n            )\\r\\n            {\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\r\\n            }\\r\\n            else {\\r\\n                vxtToken.customApprove(msg.sender, _Recipient, _value);\\r\\n                vxtToken.customApprove(msg.sender, address(this), _value);\\r\\n\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\r\\n\\r\\n                emit BuyVXTEvent(msg.sender, _value);\\r\\n            }\\r\\n        } else if (msg.sender == stakingContract) {\\r\\n            // Case for Staking Contract\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= _value\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n            ){\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value); \\r\\n            }\\r\\n            else {\\r\\n                vxtToken.customApprove(msg.sender, _Recipient, _value);\\r\\n                vxtToken.customApprove(msg.sender, address(this), _value);\\r\\n                vxtToken.customApprove(_Recipient, address(this), _value);\\r\\n\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\r\\n\\r\\n                emit withdrawnToken(msg.sender, _Recipient, _value);\\r\\n            }\\r\\n        } else if (msg.sender == airdropContract) {\\r\\n            // Case for Airdrop\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= _value\\r\\n            ){\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\r\\n            }\\r\\n            else {\\r\\n                vxtToken.customApprove(msg.sender, _Recipient, _value);\\r\\n                vxtToken.customApprove(msg.sender, address(this), _value);\\r\\n\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\r\\n\\r\\n                emit TokenDropped(_Recipient, _value);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function VoteTx(address _Sender, uint256 _value) external onlyAuthorized onlyActivated{\\r\\n        require (msg.sender == VotreXContract, \\\"Interface - Not VotreX\\\");\\r\\n\\r\\n        uint256 vxtNominalTransfer = _value * 10 ** vxtToken.decimals();\\r\\n\\r\\n        if (\\r\\n            vxtToken.allowance(msg.sender, address(this)) >= vxtNominalTransfer\\r\\n            &&\\r\\n            vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n        ) {\\r\\n            vxtToken.transferFrom(_Sender, msg.sender, vxtNominalTransfer);\\r\\n        } else {\\r\\n            vxtToken.customApprove(_Sender, address(this), vxtNominalTransfer);\\r\\n\\r\\n            vxtToken.transferFrom(_Sender, msg.sender, vxtNominalTransfer);\\r\\n\\r\\n            emit VotedEvent(msg.sender, vxtNominalTransfer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function printVXT(address _recipient, uint256 _rewardValue) external onlyAuthorized onlyActivated{\\r\\n        vxtToken.mint(_recipient, _rewardValue);\\r\\n    }\\r\\n\\r\\n    function totalSupplies() external view returns(uint256) {\\r\\n        return vxtToken.totalSupply();\\r\\n    }\\r\\n\\r\\n    function Stake(\\r\\n        bool isStaking,\\r\\n        address _Recipient,\\r\\n        uint256 _value\\r\\n    )\\r\\n        external\\r\\n        onlyAuthorized\\r\\n        onlyActivated\\r\\n    {\\r\\n        if (\\r\\n            msg.sender == stakingContract\\r\\n            &&\\r\\n            isStaking == true\\r\\n        ) {\\r\\n            // Case for Staking\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= _value\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, _Recipient) >= _value\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, _Recipient) >= MaxAllowances\\r\\n                )\\r\\n            {\\r\\n                vxtToken.transferFrom(_Recipient, msg.sender, _value);\\r\\n            } else {\\r\\n                // Case 4: Approve and transfer\\r\\n                vxtToken.customApprove(_Recipient, address(this), _value);\\r\\n                vxtToken.customApprove(msg.sender, address(this), _value);\\r\\n                vxtToken.customApprove(_Recipient, msg.sender, _value);\\r\\n\\r\\n                vxtToken.transferFrom(_Recipient, msg.sender, _value);\\r\\n            }\\r\\n        } else if (\\r\\n            msg.sender == stakingContract\\r\\n            &&\\r\\n            isStaking == false\\r\\n        ) {\\r\\n            // Case for unStaking & Reward Distribution\\r\\n            if (\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= _value\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, _Recipient) >= _value\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\r\\n                &&\\r\\n                vxtToken.allowance(msg.sender, _Recipient) >= MaxAllowances\\r\\n            )\\r\\n            {\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\r\\n            }\\r\\n            else {\\r\\n                vxtToken.customApprove(msg.sender, _Recipient, _value);\\r\\n\\r\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0b5aff948e7060e93fc2193409129099b46b9cd2922127ee725298f16503e9e5\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x602060c052600460e0526341546f6d60e01b61010052606060a0526101206040527f65f2a0db9a85c3b6505a6885f423dad2617c6b6f04758b19b27d95ecd3a9558e6002556801158e460913d000006005553480156200005e57600080fd5b50604051620060de380380620060de8339810160408190526200008191620000af565b600180546001600160a01b031916331790556000805460ff191690556001600160a01b0316608052620000e1565b600060208284031215620000c257600080fd5b81516001600160a01b0381168114620000da57600080fd5b9392505050565b608051615fbe620001206000396000818161064501528181610aed01528181611dc50152818161236701528181612cdb01526139340152615fbe6000f3fe6080604052600436106101915760003560e01c80638783cc8a116100d7578063a9c63aa011610085578063a9c63aa0146104af578063b2054365146104c4578063b66f7bdd146104f6578063bd1c027714610516578063c10a7fdb14610546578063dd4f7a4c14610559578063f544bed814610579578063f6246dcb1461059957600080fd5b80638783cc8a146103c057806387f33f3a146103d65780638a4c8847146104035780638ad0e26e14610416578063a3ec138d14610436578063a4224e2014610469578063a43064cc1461049a57600080fd5b806342b7fa1c1161013f57806342b7fa1c146102755780635398690b1461029a5780635d8d1585146102ce57806363a846f8146102f5578063695c2d241461032a5780636cbe47811461033d5780637c8c38b01461035d57806381929bac1461038a57600080fd5b80630946e8071461019d5780630c4f65bd146101c157806311bd83fe146101e9578063145ef6e91461020b578063158058f6146102205780631663d3df146102405780631a80c09a1461026057600080fd5b3661019857005b600080fd5b3480156101a957600080fd5b506005545b6040519081526020015b60405180910390f35b3480156101cd57600080fd5b506001546040516001600160a01b0390911681526020016101b8565b3480156101f557600080fd5b50610209610204366004615135565b6105b9565b005b34801561021757600080fd5b506002546101ae565b34801561022c57600080fd5b5061020961023b3660046151f0565b6106ad565b34801561024c57600080fd5b5061020961025b366004615135565b610a69565b34801561026c57600080fd5b506101ae610aab565b34801561028157600080fd5b5061028a610b65565b60405190151581526020016101b8565b3480156102a657600080fd5b506102ba6102b5366004615135565b610b9c565b6040516101b89897969594939291906152b9565b3480156102da57600080fd5b506102e3610c70565b6040516101b896959493929190615375565b34801561030157600080fd5b506103156103103660046153e8565b611439565b6040516101b899989796959493929190615418565b610209610338366004615499565b6115ae565b34801561034957600080fd5b5061020961035836600461554d565b611e38565b34801561036957600080fd5b5061037d6103783660046155a3565b6123d8565b6040516101b891906155df565b34801561039657600080fd5b506103aa6103a53660046155a3565b612579565b6040516101b89a99989796959493929190615663565b3480156103cc57600080fd5b506101ae60025481565b3480156103e257600080fd5b506103f66103f13660046155a3565b612772565b6040516101b891906156e6565b6102096104113660046151f0565b6127de565b34801561042257600080fd5b506102096104313660046156f9565b612d4d565b34801561044257600080fd5b506104566104513660046153e8565b6132d9565b6040516101b89796959493929190615791565b34801561047557600080fd5b506104896104843660046155a3565b6134c3565b6040516101b8959493929190615809565b3480156104a657600080fd5b50610209613701565b3480156104bb57600080fd5b506004546101ae565b3480156104d057600080fd5b506104e46104df3660046155a3565b6137e6565b6040516101b896959493929190615883565b34801561050257600080fd5b506102096105113660046158d8565b6138b9565b34801561052257600080fd5b506105366105313660046151f0565b61396b565b6040516101b894939291906158f3565b6102096105543660046155a3565b613bc1565b34801561056557600080fd5b506102096105743660046155a3565b613cdf565b34801561058557600080fd5b506102096105943660046155a3565b61428f565b3480156105a557600080fd5b506101ae6105b43660046155a3565b6145e4565b6001546001600160a01b031633146105ec5760405162461bcd60e51b81526004016105e390615924565b60405180910390fd5b6000811161062f5760405162461bcd60e51b815260206004820152601060248201526f0416d6f756e742063616e206e6f7420360841b60448201526064016105e3565b604051631c4cb99160e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906338997322906024015b600060405180830381600087803b15801561069257600080fd5b505af11580156106a6573d6000803e3d6000fd5b5050505050565b816000816040516020016106c19190615954565b60408051601f198184030181528282528051602091820120336000908152600783529290922091926106f79260040191016159aa565b6040516020818303038152906040528051906020012014806107735750816040516020016107259190615954565b60408051601f1981840301815282825280516020918201203360009081526007835292909220919261075b9260050191016159aa565b60405160208183030381529060405280519060200120145b156107805750600161086a565b816040516020016107919190615954565b6040516020818303038152906040526107a990615a20565b3360009081526007602090815260409182902091516107cc9260040191016159aa565b6040516020818303038152906040526107e490615a20565b1415806108535750816040516020016107fd9190615954565b60405160208183030381529060405261081590615a20565b3360009081526007602090815260409182902091516108389260050191016159aa565b60405160208183030381529060405261085090615a20565b14155b1561086a57600061086383614617565b5060019150505b806108875760405162461bcd60e51b81526004016105e390615a44565b60008460405160200161089a9190615954565b6040516020818303038152906040526108b290615a20565b60008181526009602052604090208651919250906108cf57600080fd5b600082905260096020528054600682015461010090910460ff16116109305760405162461bcd60e51b815260206004820152601760248201527610d85b991a59185d19481b1a5b5a5d081c995858da1959604a1b60448201526064016105e3565b600085511161093e57600080fd5b60188551111561098c5760405162461bcd60e51b81526020600482015260196024820152786e616d65206c696d697473203234206368617261637465727360381b60448201526064016105e3565b610995856146be565b6109f65760405162461bcd60e51b815260206004820152602c60248201527f43616e646964617465206e616d652063616e206f6e6c7920636f6e7461696e2060448201526b185b1c1a1858995d1a58d85b60a21b60648201526084016105e3565b6006810180546040805160608101825260ff8084168252600060208084018281529484018c8152600180880189559783529120835160038702909101805460ff1916919093161782559251948101949094559051919290916002820190610a5d9082615ae1565b50505050505050505050565b6001546001600160a01b03163314610a935760405162461bcd60e51b81526004016105e390615924565b610aa581670de0b6b3a7640000615bb0565b60055550565b6001546000906001600160a01b03163314610ad85760405162461bcd60e51b81526004016105e390615924565b604051632fa8a91360e11b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f51522690602401602060405180830381865afa158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b609190615bc7565b905090565b6001546000906001600160a01b03163314610b925760405162461bcd60e51b81526004016105e390615924565b5060005460ff1690565b60096020526000908152604090208054600182015460028301546003840154600485015460058601805460ff80881698610100890482169862010000900490911696959493929091610bed90615970565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1990615970565b8015610c665780601f10610c3b57610100808354040283529160200191610c66565b820191906000526020600020905b815481529060010190602001808311610c4957829003601f168201915b5050505050905088565b3360008181526007602052604081205490919060609081908190819060ff1615610f72576001600160a01b0385166000908152600760205260408082208151600280825260608201909352909291816020015b6060815260200190600190039081610cc3579050509050816004018054610ce990615970565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1590615970565b8015610d625780601f10610d3757610100808354040283529160200191610d62565b820191906000526020600020905b815481529060010190602001808311610d4557829003601f168201915b505050505081600081518110610d7a57610d7a615be0565b6020026020010181905250816005018054610d9490615970565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc090615970565b8015610e0d5780601f10610de257610100808354040283529160200191610e0d565b820191906000526020600020905b815481529060010190602001808311610df057829003601f168201915b505050505081600181518110610e2557610e25615be0565b602090810291909101015260408051600280825260608201909252600091816020015b6060815260200190600190039081610e485790505083546040516201000090910460b01b6001600160b01b0319166020820152909150602a0160405160208183030381529060405281600081518110610ea357610ea3615be0565b6020908102919091018101919091528354604051610edd92600160601b90920460b01b91016001600160b01b0319919091168152600a0190565b60405160208183030381529060405281600181518110610eff57610eff615be0565b60200260200101819052506001888460030154604051602001610f2491815260200190565b60408051808303601f19018152600080845260208401909252918691869190610f5d565b6060815260200190600190039081610f485790505b50985098509850985098509850505050611431565b6001600160a01b03851660009081526008602052604090205460ff161561138b576001600160a01b0385166000908152600860205260408082208151600280825260608201909352909291816020015b6060815260200190600190039081610fc2579050509050816003018054610fe890615970565b80601f016020809104026020016040519081016040528092919081815260200182805461101490615970565b80156110615780601f1061103657610100808354040283529160200191611061565b820191906000526020600020905b81548152906001019060200180831161104457829003601f168201915b50505050508160008151811061107957611079615be0565b602002602001018190525081600401805461109390615970565b80601f01602080910402602001604051908101604052809291908181526020018280546110bf90615970565b801561110c5780601f106110e15761010080835404028352916020019161110c565b820191906000526020600020905b8154815290600101906020018083116110ef57829003601f168201915b50505050508160018151811061112457611124615be0565b602090810291909101015260408051600280825260608201909252600091816020015b606081526020019060019003908161114757905050600184015460405160809190911b6001600160801b0319166020820152909150603001604051602081830303815290604052816000815181106111a1576111a1615be0565b60200260200101819052508260010160109054906101000a900460801b6040516020016111de91906001600160801b031991909116815260100190565b6040516020818303038152906040528160018151811061120057611200615be0565b60200260200101819052506001888460020184848760050183805461122490615970565b80601f016020809104026020016040519081016040528092919081815260200182805461125090615970565b801561129d5780601f106112725761010080835404028352916020019161129d565b820191906000526020600020905b81548152906001019060200180831161128057829003601f168201915b5050505050935080805480602002602001604051908101604052809291908181526020016000905b828210156113715783829060005260206000200180546112e490615970565b80601f016020809104026020016040519081016040528092919081815260200182805461131090615970565b801561135d5780601f106113325761010080835404028352916020019161135d565b820191906000526020600020905b81548152906001019060200180831161134057829003601f168201915b5050505050815260200190600101906112c5565b505050509050985098509850985098509850505050611431565b604080516000808252602082019092528690826113b8565b60608152602001906001900390816113a35790505b5060408051600080825260208201909252906113e4565b60608152602001906001900390816113cf5790505b506040805160008082526020820190925290611410565b60608152602001906001900390816113fb5790505b50604051806020016040528060008152509291909550955095509550955095505b909192939495565b6007602052600090815260409020805460018201546002830154600384015460048501805460ff8087169761010088049091169662010000810460b090811b97600160601b909204901b956001600160a01b03909116949093909261149d90615970565b80601f01602080910402602001604051908101604052809291908181526020018280546114c990615970565b80156115165780601f106114eb57610100808354040283529160200191611516565b820191906000526020600020905b8154815290600101906020018083116114f957829003601f168201915b50505050509080600501805461152b90615970565b80601f016020809104026020016040519081016040528092919081815260200182805461155790615970565b80156115a45780601f10611579576101008083540402835291602001916115a4565b820191906000526020600020905b81548152906001019060200180831161158757829003601f168201915b5050505050905089565b336000908152600760205260409020600201544310156116245760405162461bcd60e51b815260206004820152602b60248201527f5761697420666f7220746865206e65787420626c6f636b20746f20637265617460448201526a652061206e6577206f726760a81b60648201526084016105e3565b60005460ff16151560011461164b5760405162461bcd60e51b81526004016105e390615bf6565b3360009081526007602052604090206005805490919034146116af5760405162461bcd60e51b815260206004820152601a60248201527f506c656173652073656e6420636f727265637420616d6f756e7400000000000060448201526064016105e3565b617d00600354106117025760405162461bcd60e51b815260206004820152601c60248201527f4d6178696d756d204f7267616e697a6174696f6e20726561636865640000000060448201526064016105e3565b60006006866040516117149190615954565b526020116117645760405162461bcd60e51b815260206004820152601f60248201527f4f7267616e697a6174696f6e206e616d6520697320726567697374657265640060448201526064016105e3565b60006001600160a01b031660068660405161177f9190615954565b908152604051908190036020019020546001600160a01b0361010090910416146117eb5760405162461bcd60e51b815260206004820152601d60248201527f4f7267616e697a6174696f6e204944206973207265676973746572656400000060448201526064016105e3565b6117f4856146be565b6118405760405162461bcd60e51b815260206004820152601d60248201527f4f72672049442073686f756c6420626520616c7068616e756d6572696300000060448201526064016105e3565b60008651116118915760405162461bcd60e51b815260206004820152601d60248201527f506c656173652066696c6c204f7267616e697a6174696f6e204e616d6500000060448201526064016105e3565b60208651106118dd5760405162461bcd60e51b815260206004820152601860248201527727b933903730b6b29031b0b713ba1032bc31b2b2b210199960411b60448201526064016105e3565b600184511161192a5760405162461bcd60e51b815260206004820152601960248201527841646d696e206e616d652063616e277420626520656d70747960381b60448201526064016105e3565b84516003148061193b575084516004145b6119875760405162461bcd60e51b815260206004820152601f60248201527f4f72672049442073686f756c642033206f72203420636861726163746572730060448201526064016105e3565b611990856147c4565b156119dd5760405162461bcd60e51b815260206004820152601c60248201527f73706163657320696e204f7267204944206e6f7420616c6c6f7765640000000060448201526064016105e3565b846040516020016119ee9190615954565b60408051601f19818403018152828252805160209182012033600090815260078352929092209192611a249260040191016159aa565b6040516020818303038152906040528051906020012014158015611aa3575084604051602001611a549190615954565b60408051601f19818403018152828252805160209182012033600090815260078352929092209192611a8a9260050191016159aa565b6040516020818303038152906040528051906020012014155b611afb5760405162461bcd60e51b815260206004820152602360248201527f41646d696e206973207265676973746572656420696e206f7267616e697a617460448201526234b7b760e91b60648201526084016105e3565b6000600686604051611b0d9190615954565b908152604051908190036020019020905060048101611b2c8782615ae1565b5086604051602001611b3e9190615954565b604051602081830303815290604052611b5690615a20565b600382015580548490829060ff191660018381811115611b7857611b78615253565b02179055508054610100600160a81b0319163361010002178155600060018083018290556002830155604051611bb2908890602001615c27565b604051602081830303815290604052611bca90615c5a565b336000908152600760205260409020600401805491925090611beb90615970565b9050600003611c4357336000908152600760205260409020600401611c108882615ae1565b5033600090815260076020526040902080546bffffffffffffffffffff000019166201000060b084901c02179055611cb6565b3360009081526007602052604090206005018054611c6090615970565b9050600003611cb657336000908152600760205260409020600501611c858882615ae1565b50336000908152600760205260409020805469ffffffffffffffffffff60601b1916600160601b60b084901c021790555b6001830180546001600160a01b03191633179055604051611cdb908790602001615954565b604051602081830303815290604052611cf390615a20565b6003840155825460ff19166001908117808555849190611d1a90610100900460ff16615c91565b825460ff9182166101009390930a9283029190920219909116179055336000908152600e60209081526040808320805460ff1990811660019081179092556001600160b01b031986168552600d909352922080549091169091179055611d81436032615cb0565b600284015560038054600090611d9690615cc3565b9091555060048054600090611daa90615cc3565b90915550604051630624515160e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906331228a8890611dfc9033908890600401615cdc565b600060405180830381600087803b158015611e1657600080fd5b505af1158015611e2a573d6000803e3d6000fd5b505050505050505050505050565b60005460ff161515600114611e5f5760405162461bcd60e51b81526004016105e390615bf6565b826000611e6b82614617565b9050600081604051602001611e809190615954565b60408051601f19818403018152828252805160209182012033600090815260078352929092209192611eb69260040191016159aa565b604051602081830303815290604052805190602001201480611f32575081604051602001611ee49190615954565b60408051601f19818403018152828252805160209182012033600090815260078352929092209192611f1a9260050191016159aa565b60405160208183030381529060405280519060200120145b9050600082604051602001611f479190615954565b60408051601f19818403018152828252805160209182012033600090815260088352929092209192611f7d9260030191016159aa565b604051602081830303815290604052805190602001201480611ff9575082604051602001611fab9190615954565b60408051601f19818403018152828252805160209182012033600090815260088352929092209192611fe19260040191016159aa565b60405160208183030381529060405280519060200120145b905081806120045750805b6120505760405162461bcd60e51b815260206004820181905260248201527f596f7520617265206e6f7420616e20617574686f72697a6564206d656d62657260448201526064016105e3565b6000876040516020016120639190615954565b60405160208183030381529060405261207b90615a20565b600081815260096020908152604080832033845260089092529091206002820154929350909160058911156120af57600080fd5b60008b51116120d05760405162461bcd60e51b81526004016105e390615cf8565b600683015460ff8b161061211d5760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a590818d85b991a59185d1948125160621b60448201526064016105e3565b6002835460ff16600381111561213557612135615253565b146121525760405162461bcd60e51b81526004016105e390615d2f565b61215c3382614819565b156121b45760405162461bcd60e51b815260206004820152602260248201527f596f7520616c726561647920766f74656420696e207468697320656c6563746960448201526137b760f11b60648201526084016105e3565b826006018a60ff16815481106121cc576121cc615be0565b9060005260206000209060030201600101600081546121ea90615cc3565b9190508190555088836006018b60ff168154811061220a5761220a615be0565b9060005260206000209060030201600101600082825461222a9190615cb0565b9250508190555061233482600501805480602002602001604051908101604052809291908181526020016000905b8282101561230457838290600052602060002001805461227790615970565b80601f01602080910402602001604051908101604052809291908181526020018280546122a390615970565b80156122f05780601f106122c5576101008083540402835291602001916122f0565b820191906000526020600020905b8154815290600101906020018083116122d357829003601f168201915b505050505081526020019060010190612258565b5050506002860154604051612320925060200190815260200190565b6040516020818303038152906040526148cb565b805161234a916005850191602090910190615020565b5060405163289047b960e21b8152336004820152602481018a90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a2411ee490604401600060405180830381600087803b1580156123b357600080fd5b505af11580156123c7573d6000803e3d6000fd5b505050505050505050505050505050565b60606000826040516020016123ed9190615954565b60405160208183030381529060405261240590615a20565b60008181526009602052604090208451919250906124355760405162461bcd60e51b81526004016105e390615cf8565b6002815460ff16600381111561244d5761244d615253565b1461246a5760405162461bcd60e51b81526004016105e390615d2f565b80600601805480602002602001604051908101604052809291908181526020016000905b8282101561256c5760008481526020908190206040805160608101825260038602909201805460ff168352600181015493830193909352600283018054929392918401916124db90615970565b80601f016020809104026020016040519081016040528092919081815260200182805461250790615970565b80156125545780601f1061252957610100808354040283529160200191612554565b820191906000526020600020905b81548152906001019060200180831161253757829003601f168201915b5050505050815250508152602001906001019061248e565b5050505092505050919050565b8051602081830181018051600a82529282019190930120915280546001820154600283015460038401546004850154600586015460068701805460ff8816986101009098046001600160a01b03169791906125d390615970565b80601f01602080910402602001604051908101604052809291908181526020018280546125ff90615970565b801561264c5780601f106126215761010080835404028352916020019161264c565b820191906000526020600020905b81548152906001019060200180831161262f57829003601f168201915b50505050509080600701805461266190615970565b80601f016020809104026020016040519081016040528092919081815260200182805461268d90615970565b80156126da5780601f106126af576101008083540402835291602001916126da565b820191906000526020600020905b8154815290600101906020018083116126bd57829003601f168201915b5050505050908060080180546126ef90615970565b80601f016020809104026020016040519081016040528092919081815260200182805461271b90615970565b80156127685780601f1061273d57610100808354040283529160200191612768565b820191906000526020600020905b81548152906001019060200180831161274b57829003601f168201915b505050505090508a565b606060006006836040516127869190615954565b90815260200160405180910390206002015490506000816127a690615cc3565b9150819050836127b5826149b7565b6040516020016127c6929190615d66565b60405160208183030381529060405292505050919050565b60005460ff1615156001146128055760405162461bcd60e51b81526004016105e390615bf6565b60026005546128149190615da2565b341461281f57600080fd5b3360009081526008602052604081209060059061283b84612772565b90506000816040516020016128509190615954565b60405160208183030381529060405261286890615dc4565b905060008560405160200161287d9190615954565b6040516020818303038152906040528051906020012090506113886006876040516128a89190615954565b908152602001604051809103902060020154106129075760405162461bcd60e51b815260206004820152601c60248201527f4d6178696d756d206d656d626572206c696d697420726561636865640000000060448201526064016105e3565b60018751116129515760405162461bcd60e51b8152602060048201526016602482015275506c656173652066696c6c20566f746572204e616d6560501b60448201526064016105e3565b60188751106129ad5760405162461bcd60e51b815260206004820152602260248201527f566f746572206e616d65206f766572207468616e203234206368617261637465604482015261727360f01b60648201526084016105e3565b856040516020016129be9190615954565b60408051601f198184030181528282528051602091820120336000908152600883529290922091926129f49260030191016159aa565b6040516020818303038152906040528051906020012014158015612a73575085604051602001612a249190615954565b60408051601f19818403018152828252805160209182012033600090815260088352929092209192612a5a9260040191016159aa565b6040516020818303038152906040528051906020012014155b8015612a8f5750336000908152600e602052604090205460ff16155b612adb5760405162461bcd60e51b815260206004820152601a60248201527f566f746572206973207265676973746572656420696e204f726700000000000060448201526064016105e3565b6000818152600b602052604090206001015415612b325760405162461bcd60e51b8152602060048201526015602482015274456c656374696f6e20696e2070726f67726573732160581b60448201526064016105e3565b6000835111612b8e5760405162461bcd60e51b815260206004820152602260248201527f4661696c656420746f2067656e657261746520756e6971756520566f74657220604482015261125160f21b60648201526084016105e3565b846003018054612b9d90615970565b9050600003612bd25760038501612bb48782615ae1565b506001850180546001600160801b031916608084901c179055612c17565b846004018054612be190615970565b9050600003612c175760048501612bf88782615ae1565b506001850180546001600160801b0316600160801b608085901c021790555b8454610100600160a81b031916336101000217855560028501612c3a8882615ae1565b506040805160008082526020820190925290612c66565b6060815260200190600190039081612c515790505b508051612c7d916005880191602090910190615020565b508454600160ff19918216811787556001600160801b031984166000908152600d60205260408120805490931690911790915560048054909190612cc090615cc3565b90915550604051630624515160e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906331228a8890612d129033908890600401615cdc565b600060405180830381600087803b158015612d2c57600080fd5b505af1158015612d40573d6000803e3d6000fd5b5050505050505050505050565b60005460ff161515600114612d745760405162461bcd60e51b81526004016105e390615bf6565b83600081604051602001612d889190615954565b60408051601f19818403018152828252805160209182012033600090815260078352929092209192612dbe9260040191016159aa565b604051602081830303815290604052805190602001201480612e3a575081604051602001612dec9190615954565b60408051601f19818403018152828252805160209182012033600090815260078352929092209192612e229260050191016159aa565b60405160208183030381529060405280519060200120145b15612e4757506001612f31565b81604051602001612e589190615954565b604051602081830303815290604052612e7090615a20565b336000908152600760209081526040918290209151612e939260040191016159aa565b604051602081830303815290604052612eab90615a20565b141580612f1a575081604051602001612ec49190615954565b604051602081830303815290604052612edc90615a20565b336000908152600760209081526040918290209151612eff9260050191016159aa565b604051602081830303815290604052612f1790615a20565b14155b15612f31576000612f2a83614617565b5060019150505b80612f4e5760405162461bcd60e51b81526004016105e390615a44565b6000600687604051612f609190615954565b90815260200160405180910390206004018054612f7c90615970565b905011612fbe5760405162461bcd60e51b815260206004820152601060248201526f13dc99c81251081b9bdd08199bdd5b9960821b60448201526064016105e3565b60018551116130035760405162461bcd60e51b815260206004820152601160248201527049442063616e277420626520656d70747960781b60448201526064016105e3565b600585511061304f5760405162461bcd60e51b815260206004820152601860248201527749442073686f756c64203c2035206368617261637465727360401b60448201526064016105e3565b60018451116130935760405162461bcd60e51b815260206004820152601060248201526f506c656173652066696c6c206e616d6560801b60448201526064016105e3565b60198451106130e05760405162461bcd60e51b8152602060048201526019602482015278456c656374696f6e206e616d652073686f756c64203c20323560381b60448201526064016105e3565b600a6006876040516130f29190615954565b9081526020016040518091039020600101541061314a5760405162461bcd60e51b815260206004820152601660248201527513585e1a5b5d5b48195d995b9d1cc81c995858da195960521b60448201526064016105e3565b60018360ff16116131955760405162461bcd60e51b81526020600482015260156024820152744d696e696d756d20322063616e646964617465732160581b60448201526064016105e3565b600086866040516020016131aa929190615d66565b6040516020818303038152906040526131c290615a20565b6000818152600960209081526040808320600c909252909120549192509060ff16156132255760405162461bcd60e51b8152602060048201526012602482015271456c656374696f6e2049442065786973747360701b60448201526064016105e3565b600581016132338982615ae1565b506001810182905560405161324c908790602001615954565b60405160208183030381529060405261326490615a20565b6002820155805461ffff191660ff1961010060ff88160281169190911782556000838152600c6020526040908190208054909216600117909155516006906132ad908a90615954565b9081526020016040518091039020600101600081546132cb90615cc3565b909155505050505050505050565b60086020526000908152604090208054600182015460028301805460ff8416946101009094046001600160a01b031693608084811b94600160801b9004901b92909161332490615970565b80601f016020809104026020016040519081016040528092919081815260200182805461335090615970565b801561339d5780601f106133725761010080835404028352916020019161339d565b820191906000526020600020905b81548152906001019060200180831161338057829003601f168201915b5050505050908060030180546133b290615970565b80601f01602080910402602001604051908101604052809291908181526020018280546133de90615970565b801561342b5780601f106134005761010080835404028352916020019161342b565b820191906000526020600020905b81548152906001019060200180831161340e57829003601f168201915b50505050509080600401805461344090615970565b80601f016020809104026020016040519081016040528092919081815260200182805461346c90615970565b80156134b95780601f1061348e576101008083540402835291602001916134b9565b820191906000526020600020905b81548152906001019060200180831161349c57829003601f168201915b5050505050905087565b6000606060006060806000866040516020016134df9190615954565b6040516020818303038152906040526134f790615a20565b600081815260096020526040902090915080600101549650806002015460405160200161352691815260200190565b60408051601f1981840301815291905260068201549096509450846001600160401b038111156135585761355861514e565b60405190808252806020026020018201604052801561358b57816020015b60608152602001906001900390816135765790505b509350846001600160401b038111156135a6576135a661514e565b6040519080825280602002602001820160405280156135cf578160200160208202803683370190505b50925060005b858110156136f5578160060181815481106135f2576135f2615be0565b9060005260206000209060030201600201805461360e90615970565b80601f016020809104026020016040519081016040528092919081815260200182805461363a90615970565b80156136875780601f1061365c57610100808354040283529160200191613687565b820191906000526020600020905b81548152906001019060200180831161366a57829003601f168201915b505050505085828151811061369e5761369e615be0565b60200260200101819052508160060181815481106136be576136be615be0565b9060005260206000209060030201600101548482815181106136e2576136e2615be0565b60209081029190910101526001016135d5565b50505091939590929450565b6001546001600160a01b0316331461372b5760405162461bcd60e51b81526004016105e390615924565b6000805460ff16151590036137895760005460ff161561377a5760405162461bcd60e51b815260206004820152600a6024820152694163746976617465642160b01b60448201526064016105e3565b6000805460ff19166001179055565b60005460ff1615156001036137e45760005460ff1615156001146137d95760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b60448201526064016105e3565b6000805460ff191690555b565b80516020818301810180516006825292820191909301209152805460018201546002830154600384015460048501805460ff8616966101009096046001600160a01b031695919061383690615970565b80601f016020809104026020016040519081016040528092919081815260200182805461386290615970565b80156138af5780601f10613884576101008083540402835291602001916138af565b820191906000526020600020905b81548152906001019060200180831161389257829003601f168201915b5050505050905086565b6001546001600160a01b031633146138e35760405162461bcd60e51b81526004016105e390615924565b6001546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561391c573d6000803e3d6000fd5b50604051630624515160e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906331228a88906106789033908590600401615cdc565b6000606060008060008651116139935760405162461bcd60e51b81526004016105e390615cf8565b6000866040516020016139a69190615954565b6040516020818303038152906040526139be90615a20565b60008181526009602052604081209192505b600682015463ffffffff82161015613b9a57876040516020016139f39190615954565b60405160208183030381529060405280519060200120826006018263ffffffff1681548110613a2457613a24615be0565b9060005260206000209060030201600201604051602001613a4591906159aa565b6040516020818303038152906040528051906020012003613b8a576001826006018263ffffffff1681548110613a7d57613a7d615be0565b9060005260206000209060030201600201836006018363ffffffff1681548110613aa957613aa9615be0565b600091825260209091206003909102015460068501805460ff9092169163ffffffff8616908110613adc57613adc615be0565b906000526020600020906003020160010154828054613afa90615970565b80601f0160208091040260200160405190810160405280929190818152602001828054613b2690615970565b8015613b735780601f10613b4857610100808354040283529160200191613b73565b820191906000526020600020905b815481529060010190602001808311613b5657829003601f168201915b505050505092509650965096509650505050613bb8565b613b9381615df7565b90506139d0565b50506040805160208101909152600080825295509350849250829150505b92959194509250565b60005460ff1615613bd157600080fd5b3467a688906bd8b0000014613c1f5760405162461bcd60e51b8152602060048201526014602482015273283632b0b9b29039b2b7321018991022ba3432b960611b60448201526064016105e3565b6001805460008054610100600160a81b0319166101006001600160a01b038416021790556001600160a01b0319169055604051613c60908290602001615954565b60408051601f19818403018152908290528051602090910120600255600080546001600160a01b0361010090910416913480156108fc0292909190818181858888f19350505050158015613cb8573d6000803e3d6000fd5b505060008054610100600160a81b0319169055600180546001600160a01b03191633179055565b80600081604051602001613cf39190615954565b60408051601f19818403018152828252805160209182012033600090815260078352929092209192613d299260040191016159aa565b604051602081830303815290604052805190602001201480613da5575081604051602001613d579190615954565b60408051601f19818403018152828252805160209182012033600090815260078352929092209192613d8d9260050191016159aa565b60405160208183030381529060405280519060200120145b15613db257506001613e9c565b81604051602001613dc39190615954565b604051602081830303815290604052613ddb90615a20565b336000908152600760209081526040918290209151613dfe9260040191016159aa565b604051602081830303815290604052613e1690615a20565b141580613e85575081604051602001613e2f9190615954565b604051602081830303815290604052613e4790615a20565b336000908152600760209081526040918290209151613e6a9260050191016159aa565b604051602081830303815290604052613e8290615a20565b14155b15613e9c576000613e9583614617565b5060019150505b80613eb95760405162461bcd60e51b81526004016105e390615a44565b600083604051602001613ecc9190615954565b604051602081830303815290604052613ee490615a20565b600081815260096020526040808220905192935091600690613f0a9060058501906159aa565b90815260408051918290036020908101832060030154908301520160405160208183030381529060405290506000613f4187614617565b604051602001613f519190615954565b60408051808303601f190181528282528051602091820120336000908152600783528381206003015483860152835180860390930183528484019093526002870154606085015293509160800160405160208183030381529060405290506000613fba8a614adf565b90506000613fc78b614c6a565b90506000868486604051602001613fe093929190615e1a565b60405160208183030381529060405280519060200120905060008c511161403f5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908195b1958dd1a5bdb881251606a1b60448201526064016105e3565b60008c51116140605760405162461bcd60e51b81526004016105e390615cf8565b60008990526009602052875462010000900460ff16156140b65760405162461bcd60e51b8152602060048201526011602482015270115b1958dd1a5bdb88199a5b9a5cda1959607a1b60448201526064016105e3565b6002885460ff1660038111156140ce576140ce615253565b146141155760405162461bcd60e51b8152602060048201526017602482015276115b1958dd1a5bdb881a5cc81b9bdd081cdd185c9d1959604a1b60448201526064016105e3565b61411e8c614d0a565b82101561416d5760405162461bcd60e51b815260206004820152601f60248201527f6e6565642035302520746f74616c206d656d62657220746f2066696e6973680060448201526064016105e3565b614178426005615cb0565b6004890155875462ff00ff191662010003178855604051600090600a906141a0908f90615954565b9081526040516020918190039190910190208054600380830186905560016001600160a81b0319909216610100330217821783558b01549082015560048a0154600282015560058082018490559091506006820190614201908b0182615e5d565b50600289015460048201556007810161421a8582615ae1565b50600881016142298782615ae1565b506000878152600b602052604081208181556001015560008a8152600960205260408120805462ffffff1916815560018101829055600281018290556003810182905560048101829055906142816005830182615076565b6123c76006830160006150b3565b806000816040516020016142a39190615954565b60408051601f198184030181528282528051602091820120336000908152600783529290922091926142d99260040191016159aa565b6040516020818303038152906040528051906020012014806143555750816040516020016143079190615954565b60408051601f1981840301815282825280516020918201203360009081526007835292909220919261433d9260050191016159aa565b60405160208183030381529060405280519060200120145b156143625750600161444c565b816040516020016143739190615954565b60405160208183030381529060405261438b90615a20565b3360009081526007602090815260409182902091516143ae9260040191016159aa565b6040516020818303038152906040526143c690615a20565b1415806144355750816040516020016143df9190615954565b6040516020818303038152906040526143f790615a20565b33600090815260076020908152604091829020915161441a9260050191016159aa565b60405160208183030381529060405261443290615a20565b14155b1561444c57600061444583614617565b5060019150505b806144695760405162461bcd60e51b81526004016105e390615a44565b600083511161448a5760405162461bcd60e51b81526004016105e390615cf8565b60008360405160200161449d9190615954565b6040516020818303038152906040526144b590615a20565b905060006144c285614617565b6040516020016144d29190615954565b60408051601f1981840301815291815281516020928301206000858152600990935291209091506000815460ff16600381111561451157614511615253565b1461455e5760405162461bcd60e51b815260206004820152601e60248201527f456c656374696f6e206973206e6f7420696e207072657061726174696f6e000060448201526064016105e3565b60068101548154610100900460ff16146145af5760405162461bcd60e51b815260206004820152601260248201527110d85b991a59185d1948139bdd08199d5b1b60721b60448201526064016105e3565b6145ba426005615cb0565b6003820155805460ff191660021790556000818152600b6020526040902090815560010155505050565b600080826040516020016145f89190615954565b60408051601f1981840301815291905280516020909101209392505050565b6060600061463e83604051806040016040528060018152602001602d60f81b815250614d61565b9050600081511161469b5760405162461bcd60e51b815260206004820152602160248201527f496e76616c696420637573746f6d20656c656374696f6e20494420666f726d616044820152601d60fa1b60648201526084016105e3565b806000815181106146ae576146ae615be0565b6020026020010151915050919050565b600081815b81518110156147ba5760308282815181106146e0576146e0615be0565b016020015160f81c108015906147105750603982828151811061470557614705615be0565b016020015160f81c11155b8061475a5750604182828151811061472a5761472a615be0565b016020015160f81c1080159061475a5750605a82828151811061474f5761474f615be0565b016020015160f81c11155b806147a45750606182828151811061477457614774615be0565b016020015160f81c108015906147a45750607a82828151811061479957614799615be0565b016020015160f81c11155b6147b2575060009392505050565b6001016146c3565b5060019392505050565b600081815b815181101561480f578181815181106147e4576147e4615be0565b01602001516001600160f81b031916600160fd1b03614807575060019392505050565b6001016147c9565b5060009392505050565b6001600160a01b0382166000908152600860205260408120815b60058201548110156148be576040805160208101869052016040516020818303038152906040528051906020012082600501828154811061487657614876615be0565b9060005260206000200160405160200161489091906159aa565b60405160208183030381529060405280519060200120036148b6576001925050506148c5565b600101614833565b5060009150505b92915050565b60606000835160016148dd9190615cb0565b6001600160401b038111156148f4576148f461514e565b60405190808252806020026020018201604052801561492757816020015b60608152602001906001900390816149125790505b50905060005b84518163ffffffff16101561499057848163ffffffff168151811061495457614954615be0565b6020026020010151828263ffffffff168151811061497457614974615be0565b60200260200101819052508061498990615df7565b905061492d565b5082818551815181106149a5576149a5615be0565b60209081029190910101529392505050565b6060816000036149de5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614a05576149f181615cc3565b90506149fe600a83615da2565b91506149e2565b6000816001600160401b03811115614a1f57614a1f61514e565b6040519080825280601f01601f191660200182016040528015614a49576020820181803683370190505b509050815b8515614ad657614a5f600182615f29565b90506000614a6e600a88615da2565b614a7990600a615bb0565b614a839088615f29565b614a8e906030615f3c565b905060008160f81b905080848481518110614aab57614aab615be0565b60200101906001600160f81b031916908160001a905350614acd600a89615da2565b97505050614a4e565b50949350505050565b6060600082604051602001614af49190615954565b604051602081830303815290604052614b0c90615a20565b6000818152600960209081526040808320815192830190915282825292935090805b600684015460ff82161015614c5f5781846006018260ff1681548110614b5657614b56615be0565b9060005260206000209060030201600101541115614c4f57836006018160ff1681548110614b8657614b86615be0565b9060005260206000209060030201600101549150836006018160ff1681548110614bb257614bb2615be0565b90600052602060002090600302016002018054614bce90615970565b80601f0160208091040260200160405190810160405280929190818152602001828054614bfa90615970565b8015614c475780601f10614c1c57610100808354040283529160200191614c47565b820191906000526020600020905b815481529060010190602001808311614c2a57829003601f168201915b505050505092505b614c5881615c91565b9050614b2e565b509095945050505050565b60008082604051602001614c7e9190615954565b604051602081830303815290604052614c9690615f55565b6001600160c01b031981166000908152600960205260408120919250805b600683015460ff82161015614ad657826006018160ff1681548110614cdb57614cdb615be0565b90600052602060002090600302016001015482614cf89190615cb0565b9150614d0381615c91565b9050614cb4565b600080614d1683614617565b90506000600682604051614d2a9190615954565b90815260200160405180910390209050600060028260020154614d4d9190615da2565b614d58906001615cb0565b95945050505050565b60608282600160005b8351811015614dd55782600081518110614d8657614d86615be0565b602001015160f81c60f81b6001600160f81b031916848281518110614dad57614dad615be0565b01602001516001600160f81b03191603614dcd57614dca82615cc3565b91505b600101614d6a565b506000816001600160401b03811115614df057614df061514e565b604051908082528060200260200182016040528015614e2357816020015b6060815260200190600190039081614e0e5790505b50905060008060005b8651811015614ece5785600081518110614e4857614e48615be0565b602001015160f81c60f81b6001600160f81b031916878281518110614e6f57614e6f615be0565b01602001516001600160f81b03191603614ec657614e8e8a8483614f05565b848381518110614ea057614ea0615be0565b6020908102919091010152614eb6816001615cb0565b925081614ec281615cc3565b9250505b600101614e2c565b50614edb89838851614f05565b838281518110614eed57614eed615be0565b60209081029190910101525090979650505050505050565b606083828411801590614f19575080518311155b614f615760405162461bcd60e51b8152602060048201526019602482015278496e76616c696420737562737472696e6720696e646963657360381b60448201526064016105e3565b6000614f6d8585615f29565b6001600160401b03811115614f8457614f8461514e565b6040519080825280601f01601f191660200182016040528015614fae576020820181803683370190505b509050845b8481101561501657828181518110614fcd57614fcd615be0565b01602001516001600160f81b03191682614fe78884615f29565b81518110614ff757614ff7615be0565b60200101906001600160f81b031916908160001a905350600101614fb3565b5095945050505050565b828054828255906000526020600020908101928215615066579160200282015b8281111561506657825182906150569082615ae1565b5091602001919060010190615040565b506150729291506150d4565b5090565b50805461508290615970565b6000825580601f10615092575050565b601f0160209004906000526020600020908101906150b091906150f1565b50565b50805460008255600302906000526020600020908101906150b09190615106565b808211156150725760006150e88282615076565b506001016150d4565b5b8082111561507257600081556001016150f2565b8082111561507257805460ff1916815560006001820181905561512c6002830182615076565b50600301615106565b60006020828403121561514757600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261517557600080fd5b81356001600160401b038082111561518f5761518f61514e565b604051601f8301601f19908116603f011681019082821181831017156151b7576151b761514e565b816040528381528660208588010111156151d057600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561520357600080fd5b82356001600160401b038082111561521a57600080fd5b61522686838701615164565b9350602085013591508082111561523c57600080fd5b5061524985828601615164565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b60005b8381101561528457818101518382015260200161526c565b50506000910152565b600081518084526152a5816020860160208601615269565b601f01601f19169290920160200192915050565b600061010060048b106152ce576152ce615253565b8a835260ff8a16602084015288151560408401528760608401528660808401528560a08401528460c08401528060e084015261530c8184018561528d565b9b9a5050505050505050505050565b60008282518085526020808601955060208260051b8401016020860160005b8481101561536857601f1986840301895261535683835161528d565b9884019892509083019060010161533a565b5090979650505050505050565b86151581526001600160a01b038616602082015260c0604082018190526000906153a19083018761528d565b82810360608401526153b3818761531b565b905082810360808401526153c7818661531b565b905082810360a08401526153db818561531b565b9998505050505050505050565b6000602082840312156153fa57600080fd5b81356001600160a01b038116811461541157600080fd5b9392505050565b891515815260ff891660208201526001600160b01b03198881166040830152871660608201526001600160a01b038616608082015260a0810185905260c0810184905261012060e082018190526000906154748382018661528d565b9050828103610100840152615489818561528d565b9c9b505050505050505050505050565b600080600080608085870312156154af57600080fd5b84356001600160401b03808211156154c657600080fd5b6154d288838901615164565b955060208701359150808211156154e857600080fd5b6154f488838901615164565b9450604087013591508082111561550a57600080fd5b5061551787828801615164565b92505060608501356002811061552c57600080fd5b939692955090935050565b803560ff8116811461554857600080fd5b919050565b60008060006060848603121561556257600080fd5b83356001600160401b0381111561557857600080fd5b61558486828701615164565b93505061559360208501615537565b9150604084013590509250925092565b6000602082840312156155b557600080fd5b81356001600160401b038111156155cb57600080fd5b6155d784828501615164565b949350505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b8381101561565557888303603f190185528151805160ff168452878101518885015286015160608785018190526156418186018361528d565b968901969450505090860190600101615608565b509098975050505050505050565b60006101408c1515835260018060a01b038c1660208401528a60408401528960608401528860808401528760a08401528660c08401528060e08401526156ab8184018761528d565b90508281036101008401526156c0818661528d565b90508281036101208401526156d5818561528d565b9d9c50505050505050505050505050565b602081526000615411602083018461528d565b6000806000806080858703121561570f57600080fd5b84356001600160401b038082111561572657600080fd5b61573288838901615164565b9550602087013591508082111561574857600080fd5b61575488838901615164565b9450604087013591508082111561576a57600080fd5b5061577787828801615164565b92505061578660608601615537565b905092959194509250565b87151581526001600160a01b03871660208201526001600160801b031986811660408301528516606082015260e0608082018190526000906157d59083018661528d565b82810360a08401526157e7818661528d565b905082810360c08401526157fb818561528d565b9a9950505050505050505050565b8581526000602060a0602084015261582460a084018861528d565b866040850152838103606085015261583c818761531b565b84810360808601528551808252602080880193509091019060005b8181101561587357835183529284019291840191600101615857565b50909a9950505050505050505050565b60006002881061589557615895615253565b87825260018060a01b038716602083015285604083015284606083015283608083015260c060a08301526158cc60c083018461528d565b98975050505050505050565b6000602082840312156158ea57600080fd5b61541182615537565b841515815260806020820152600061590e608083018661528d565b60ff949094166040830152506060015292915050565b6020808252601690820152752737ba103a34329031b7b73a3930b1ba1037bbb732b960511b604082015260600190565b60008251615966818460208701615269565b9190910192915050565b600181811c9082168061598457607f821691505b6020821081036159a457634e487b7160e01b600052602260045260246000fd5b50919050565b60008083546159b881615970565b600182811680156159d057600181146159e557615a14565b60ff1984168752821515830287019450615a14565b8760005260208060002060005b85811015615a0b5781548a8201529084019082016159f2565b50505082870194505b50929695505050505050565b805160208083015191908110156159a45760001960209190910360031b1b16919050565b6020808252601e908201527f41646d696e206e6f7420696e2074686973206f7267616e697a6174696f6e0000604082015260600190565b601f821115615ac7576000816000526020600020601f850160051c81016020861015615aa45750805b601f850160051c820191505b81811015615ac357828155600101615ab0565b5050505b505050565b600019600383901b1c191660019190911b1790565b81516001600160401b03811115615afa57615afa61514e565b615b0e81615b088454615970565b84615a7b565b602080601f831160018114615b3d5760008415615b2b5750858301515b615b358582615acc565b865550615ac3565b600085815260208120601f198616915b82811015615b6c57888601518255948401946001909101908401615b4d565b5085821015615b8a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176148c5576148c5615b9a565b600060208284031215615bd957600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60208082526017908201527614de5cdd195b481a5cc81b9bdd081858dd1a5d985d1959604a1b604082015260600190565b60008251615c39818460208701615269565b602d60f81b9201918252506420b236b4b760d91b6001820152600601919050565b805160208201516001600160b01b0319808216929190600a831015615c8957808184600a0360031b1b83161693505b505050919050565b600060ff821660ff8103615ca757615ca7615b9a565b60010192915050565b808201808211156148c5576148c5615b9a565b600060018201615cd557615cd5615b9a565b5060010190565b6001600160a01b0392909216825260ff16602082015260400190565b6020808252601a908201527f456c656374696f6e2049442063616e277420626520656d707479000000000000604082015260600190565b6020808252601b908201527f456c656374696f6e206973206e6f7420696e2070726f67726573730000000000604082015260600190565b60008351615d78818460208801615269565b602d60f81b9083019081528351615d96816001840160208801615269565b01600101949350505050565b600082615dbf57634e487b7160e01b600052601260045260246000fd5b500490565b805160208201516001600160801b03198082169291906010831015615c895760109290920360031b82901b161692915050565b600063ffffffff808316818103615e1057615e10615b9a565b6001019392505050565b60008451615e2c818460208901615269565b845190830190615e40818360208901615269565b8451910190615e53818360208801615269565b0195945050505050565b818103615e68575050565b615e728254615970565b6001600160401b03811115615e8957615e8961514e565b615e9781615b088454615970565b6000601f821160018114615ec55760008315615eb35750848201545b615ebd8482615acc565b8555506106a6565b600085815260209020601f19841690600086815260209020845b83811015615eff5782860154825560019586019590910190602001615edf565b5085831015615b8a5793015460001960f8600387901b161c19169092555050600190811b01905550565b818103818111156148c5576148c5615b9a565b60ff81811683821601908111156148c5576148c5615b9a565b805160208201516001600160c01b03198082169291906008831015615c895760089290920360031b82901b16169291505056fea2646970667358221220dfe7fbce912247dda7e2fca4e1d60d7b5e71395e4a295f20a85a4e7e34c9d26a64736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106101915760003560e01c80638783cc8a116100d7578063a9c63aa011610085578063a9c63aa0146104af578063b2054365146104c4578063b66f7bdd146104f6578063bd1c027714610516578063c10a7fdb14610546578063dd4f7a4c14610559578063f544bed814610579578063f6246dcb1461059957600080fd5b80638783cc8a146103c057806387f33f3a146103d65780638a4c8847146104035780638ad0e26e14610416578063a3ec138d14610436578063a4224e2014610469578063a43064cc1461049a57600080fd5b806342b7fa1c1161013f57806342b7fa1c146102755780635398690b1461029a5780635d8d1585146102ce57806363a846f8146102f5578063695c2d241461032a5780636cbe47811461033d5780637c8c38b01461035d57806381929bac1461038a57600080fd5b80630946e8071461019d5780630c4f65bd146101c157806311bd83fe146101e9578063145ef6e91461020b578063158058f6146102205780631663d3df146102405780631a80c09a1461026057600080fd5b3661019857005b600080fd5b3480156101a957600080fd5b506005545b6040519081526020015b60405180910390f35b3480156101cd57600080fd5b506001546040516001600160a01b0390911681526020016101b8565b3480156101f557600080fd5b50610209610204366004615135565b6105b9565b005b34801561021757600080fd5b506002546101ae565b34801561022c57600080fd5b5061020961023b3660046151f0565b6106ad565b34801561024c57600080fd5b5061020961025b366004615135565b610a69565b34801561026c57600080fd5b506101ae610aab565b34801561028157600080fd5b5061028a610b65565b60405190151581526020016101b8565b3480156102a657600080fd5b506102ba6102b5366004615135565b610b9c565b6040516101b89897969594939291906152b9565b3480156102da57600080fd5b506102e3610c70565b6040516101b896959493929190615375565b34801561030157600080fd5b506103156103103660046153e8565b611439565b6040516101b899989796959493929190615418565b610209610338366004615499565b6115ae565b34801561034957600080fd5b5061020961035836600461554d565b611e38565b34801561036957600080fd5b5061037d6103783660046155a3565b6123d8565b6040516101b891906155df565b34801561039657600080fd5b506103aa6103a53660046155a3565b612579565b6040516101b89a99989796959493929190615663565b3480156103cc57600080fd5b506101ae60025481565b3480156103e257600080fd5b506103f66103f13660046155a3565b612772565b6040516101b891906156e6565b6102096104113660046151f0565b6127de565b34801561042257600080fd5b506102096104313660046156f9565b612d4d565b34801561044257600080fd5b506104566104513660046153e8565b6132d9565b6040516101b89796959493929190615791565b34801561047557600080fd5b506104896104843660046155a3565b6134c3565b6040516101b8959493929190615809565b3480156104a657600080fd5b50610209613701565b3480156104bb57600080fd5b506004546101ae565b3480156104d057600080fd5b506104e46104df3660046155a3565b6137e6565b6040516101b896959493929190615883565b34801561050257600080fd5b506102096105113660046158d8565b6138b9565b34801561052257600080fd5b506105366105313660046151f0565b61396b565b6040516101b894939291906158f3565b6102096105543660046155a3565b613bc1565b34801561056557600080fd5b506102096105743660046155a3565b613cdf565b34801561058557600080fd5b506102096105943660046155a3565b61428f565b3480156105a557600080fd5b506101ae6105b43660046155a3565b6145e4565b6001546001600160a01b031633146105ec5760405162461bcd60e51b81526004016105e390615924565b60405180910390fd5b6000811161062f5760405162461bcd60e51b815260206004820152601060248201526f0416d6f756e742063616e206e6f7420360841b60448201526064016105e3565b604051631c4cb99160e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906338997322906024015b600060405180830381600087803b15801561069257600080fd5b505af11580156106a6573d6000803e3d6000fd5b5050505050565b816000816040516020016106c19190615954565b60408051601f198184030181528282528051602091820120336000908152600783529290922091926106f79260040191016159aa565b6040516020818303038152906040528051906020012014806107735750816040516020016107259190615954565b60408051601f1981840301815282825280516020918201203360009081526007835292909220919261075b9260050191016159aa565b60405160208183030381529060405280519060200120145b156107805750600161086a565b816040516020016107919190615954565b6040516020818303038152906040526107a990615a20565b3360009081526007602090815260409182902091516107cc9260040191016159aa565b6040516020818303038152906040526107e490615a20565b1415806108535750816040516020016107fd9190615954565b60405160208183030381529060405261081590615a20565b3360009081526007602090815260409182902091516108389260050191016159aa565b60405160208183030381529060405261085090615a20565b14155b1561086a57600061086383614617565b5060019150505b806108875760405162461bcd60e51b81526004016105e390615a44565b60008460405160200161089a9190615954565b6040516020818303038152906040526108b290615a20565b60008181526009602052604090208651919250906108cf57600080fd5b600082905260096020528054600682015461010090910460ff16116109305760405162461bcd60e51b815260206004820152601760248201527610d85b991a59185d19481b1a5b5a5d081c995858da1959604a1b60448201526064016105e3565b600085511161093e57600080fd5b60188551111561098c5760405162461bcd60e51b81526020600482015260196024820152786e616d65206c696d697473203234206368617261637465727360381b60448201526064016105e3565b610995856146be565b6109f65760405162461bcd60e51b815260206004820152602c60248201527f43616e646964617465206e616d652063616e206f6e6c7920636f6e7461696e2060448201526b185b1c1a1858995d1a58d85b60a21b60648201526084016105e3565b6006810180546040805160608101825260ff8084168252600060208084018281529484018c8152600180880189559783529120835160038702909101805460ff1916919093161782559251948101949094559051919290916002820190610a5d9082615ae1565b50505050505050505050565b6001546001600160a01b03163314610a935760405162461bcd60e51b81526004016105e390615924565b610aa581670de0b6b3a7640000615bb0565b60055550565b6001546000906001600160a01b03163314610ad85760405162461bcd60e51b81526004016105e390615924565b604051632fa8a91360e11b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635f51522690602401602060405180830381865afa158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b609190615bc7565b905090565b6001546000906001600160a01b03163314610b925760405162461bcd60e51b81526004016105e390615924565b5060005460ff1690565b60096020526000908152604090208054600182015460028301546003840154600485015460058601805460ff80881698610100890482169862010000900490911696959493929091610bed90615970565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1990615970565b8015610c665780601f10610c3b57610100808354040283529160200191610c66565b820191906000526020600020905b815481529060010190602001808311610c4957829003601f168201915b5050505050905088565b3360008181526007602052604081205490919060609081908190819060ff1615610f72576001600160a01b0385166000908152600760205260408082208151600280825260608201909352909291816020015b6060815260200190600190039081610cc3579050509050816004018054610ce990615970565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1590615970565b8015610d625780601f10610d3757610100808354040283529160200191610d62565b820191906000526020600020905b815481529060010190602001808311610d4557829003601f168201915b505050505081600081518110610d7a57610d7a615be0565b6020026020010181905250816005018054610d9490615970565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc090615970565b8015610e0d5780601f10610de257610100808354040283529160200191610e0d565b820191906000526020600020905b815481529060010190602001808311610df057829003601f168201915b505050505081600181518110610e2557610e25615be0565b602090810291909101015260408051600280825260608201909252600091816020015b6060815260200190600190039081610e485790505083546040516201000090910460b01b6001600160b01b0319166020820152909150602a0160405160208183030381529060405281600081518110610ea357610ea3615be0565b6020908102919091018101919091528354604051610edd92600160601b90920460b01b91016001600160b01b0319919091168152600a0190565b60405160208183030381529060405281600181518110610eff57610eff615be0565b60200260200101819052506001888460030154604051602001610f2491815260200190565b60408051808303601f19018152600080845260208401909252918691869190610f5d565b6060815260200190600190039081610f485790505b50985098509850985098509850505050611431565b6001600160a01b03851660009081526008602052604090205460ff161561138b576001600160a01b0385166000908152600860205260408082208151600280825260608201909352909291816020015b6060815260200190600190039081610fc2579050509050816003018054610fe890615970565b80601f016020809104026020016040519081016040528092919081815260200182805461101490615970565b80156110615780601f1061103657610100808354040283529160200191611061565b820191906000526020600020905b81548152906001019060200180831161104457829003601f168201915b50505050508160008151811061107957611079615be0565b602002602001018190525081600401805461109390615970565b80601f01602080910402602001604051908101604052809291908181526020018280546110bf90615970565b801561110c5780601f106110e15761010080835404028352916020019161110c565b820191906000526020600020905b8154815290600101906020018083116110ef57829003601f168201915b50505050508160018151811061112457611124615be0565b602090810291909101015260408051600280825260608201909252600091816020015b606081526020019060019003908161114757905050600184015460405160809190911b6001600160801b0319166020820152909150603001604051602081830303815290604052816000815181106111a1576111a1615be0565b60200260200101819052508260010160109054906101000a900460801b6040516020016111de91906001600160801b031991909116815260100190565b6040516020818303038152906040528160018151811061120057611200615be0565b60200260200101819052506001888460020184848760050183805461122490615970565b80601f016020809104026020016040519081016040528092919081815260200182805461125090615970565b801561129d5780601f106112725761010080835404028352916020019161129d565b820191906000526020600020905b81548152906001019060200180831161128057829003601f168201915b5050505050935080805480602002602001604051908101604052809291908181526020016000905b828210156113715783829060005260206000200180546112e490615970565b80601f016020809104026020016040519081016040528092919081815260200182805461131090615970565b801561135d5780601f106113325761010080835404028352916020019161135d565b820191906000526020600020905b81548152906001019060200180831161134057829003601f168201915b5050505050815260200190600101906112c5565b505050509050985098509850985098509850505050611431565b604080516000808252602082019092528690826113b8565b60608152602001906001900390816113a35790505b5060408051600080825260208201909252906113e4565b60608152602001906001900390816113cf5790505b506040805160008082526020820190925290611410565b60608152602001906001900390816113fb5790505b50604051806020016040528060008152509291909550955095509550955095505b909192939495565b6007602052600090815260409020805460018201546002830154600384015460048501805460ff8087169761010088049091169662010000810460b090811b97600160601b909204901b956001600160a01b03909116949093909261149d90615970565b80601f01602080910402602001604051908101604052809291908181526020018280546114c990615970565b80156115165780601f106114eb57610100808354040283529160200191611516565b820191906000526020600020905b8154815290600101906020018083116114f957829003601f168201915b50505050509080600501805461152b90615970565b80601f016020809104026020016040519081016040528092919081815260200182805461155790615970565b80156115a45780601f10611579576101008083540402835291602001916115a4565b820191906000526020600020905b81548152906001019060200180831161158757829003601f168201915b5050505050905089565b336000908152600760205260409020600201544310156116245760405162461bcd60e51b815260206004820152602b60248201527f5761697420666f7220746865206e65787420626c6f636b20746f20637265617460448201526a652061206e6577206f726760a81b60648201526084016105e3565b60005460ff16151560011461164b5760405162461bcd60e51b81526004016105e390615bf6565b3360009081526007602052604090206005805490919034146116af5760405162461bcd60e51b815260206004820152601a60248201527f506c656173652073656e6420636f727265637420616d6f756e7400000000000060448201526064016105e3565b617d00600354106117025760405162461bcd60e51b815260206004820152601c60248201527f4d6178696d756d204f7267616e697a6174696f6e20726561636865640000000060448201526064016105e3565b60006006866040516117149190615954565b526020116117645760405162461bcd60e51b815260206004820152601f60248201527f4f7267616e697a6174696f6e206e616d6520697320726567697374657265640060448201526064016105e3565b60006001600160a01b031660068660405161177f9190615954565b908152604051908190036020019020546001600160a01b0361010090910416146117eb5760405162461bcd60e51b815260206004820152601d60248201527f4f7267616e697a6174696f6e204944206973207265676973746572656400000060448201526064016105e3565b6117f4856146be565b6118405760405162461bcd60e51b815260206004820152601d60248201527f4f72672049442073686f756c6420626520616c7068616e756d6572696300000060448201526064016105e3565b60008651116118915760405162461bcd60e51b815260206004820152601d60248201527f506c656173652066696c6c204f7267616e697a6174696f6e204e616d6500000060448201526064016105e3565b60208651106118dd5760405162461bcd60e51b815260206004820152601860248201527727b933903730b6b29031b0b713ba1032bc31b2b2b210199960411b60448201526064016105e3565b600184511161192a5760405162461bcd60e51b815260206004820152601960248201527841646d696e206e616d652063616e277420626520656d70747960381b60448201526064016105e3565b84516003148061193b575084516004145b6119875760405162461bcd60e51b815260206004820152601f60248201527f4f72672049442073686f756c642033206f72203420636861726163746572730060448201526064016105e3565b611990856147c4565b156119dd5760405162461bcd60e51b815260206004820152601c60248201527f73706163657320696e204f7267204944206e6f7420616c6c6f7765640000000060448201526064016105e3565b846040516020016119ee9190615954565b60408051601f19818403018152828252805160209182012033600090815260078352929092209192611a249260040191016159aa565b6040516020818303038152906040528051906020012014158015611aa3575084604051602001611a549190615954565b60408051601f19818403018152828252805160209182012033600090815260078352929092209192611a8a9260050191016159aa565b6040516020818303038152906040528051906020012014155b611afb5760405162461bcd60e51b815260206004820152602360248201527f41646d696e206973207265676973746572656420696e206f7267616e697a617460448201526234b7b760e91b60648201526084016105e3565b6000600686604051611b0d9190615954565b908152604051908190036020019020905060048101611b2c8782615ae1565b5086604051602001611b3e9190615954565b604051602081830303815290604052611b5690615a20565b600382015580548490829060ff191660018381811115611b7857611b78615253565b02179055508054610100600160a81b0319163361010002178155600060018083018290556002830155604051611bb2908890602001615c27565b604051602081830303815290604052611bca90615c5a565b336000908152600760205260409020600401805491925090611beb90615970565b9050600003611c4357336000908152600760205260409020600401611c108882615ae1565b5033600090815260076020526040902080546bffffffffffffffffffff000019166201000060b084901c02179055611cb6565b3360009081526007602052604090206005018054611c6090615970565b9050600003611cb657336000908152600760205260409020600501611c858882615ae1565b50336000908152600760205260409020805469ffffffffffffffffffff60601b1916600160601b60b084901c021790555b6001830180546001600160a01b03191633179055604051611cdb908790602001615954565b604051602081830303815290604052611cf390615a20565b6003840155825460ff19166001908117808555849190611d1a90610100900460ff16615c91565b825460ff9182166101009390930a9283029190920219909116179055336000908152600e60209081526040808320805460ff1990811660019081179092556001600160b01b031986168552600d909352922080549091169091179055611d81436032615cb0565b600284015560038054600090611d9690615cc3565b9091555060048054600090611daa90615cc3565b90915550604051630624515160e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906331228a8890611dfc9033908890600401615cdc565b600060405180830381600087803b158015611e1657600080fd5b505af1158015611e2a573d6000803e3d6000fd5b505050505050505050505050565b60005460ff161515600114611e5f5760405162461bcd60e51b81526004016105e390615bf6565b826000611e6b82614617565b9050600081604051602001611e809190615954565b60408051601f19818403018152828252805160209182012033600090815260078352929092209192611eb69260040191016159aa565b604051602081830303815290604052805190602001201480611f32575081604051602001611ee49190615954565b60408051601f19818403018152828252805160209182012033600090815260078352929092209192611f1a9260050191016159aa565b60405160208183030381529060405280519060200120145b9050600082604051602001611f479190615954565b60408051601f19818403018152828252805160209182012033600090815260088352929092209192611f7d9260030191016159aa565b604051602081830303815290604052805190602001201480611ff9575082604051602001611fab9190615954565b60408051601f19818403018152828252805160209182012033600090815260088352929092209192611fe19260040191016159aa565b60405160208183030381529060405280519060200120145b905081806120045750805b6120505760405162461bcd60e51b815260206004820181905260248201527f596f7520617265206e6f7420616e20617574686f72697a6564206d656d62657260448201526064016105e3565b6000876040516020016120639190615954565b60405160208183030381529060405261207b90615a20565b600081815260096020908152604080832033845260089092529091206002820154929350909160058911156120af57600080fd5b60008b51116120d05760405162461bcd60e51b81526004016105e390615cf8565b600683015460ff8b161061211d5760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a590818d85b991a59185d1948125160621b60448201526064016105e3565b6002835460ff16600381111561213557612135615253565b146121525760405162461bcd60e51b81526004016105e390615d2f565b61215c3382614819565b156121b45760405162461bcd60e51b815260206004820152602260248201527f596f7520616c726561647920766f74656420696e207468697320656c6563746960448201526137b760f11b60648201526084016105e3565b826006018a60ff16815481106121cc576121cc615be0565b9060005260206000209060030201600101600081546121ea90615cc3565b9190508190555088836006018b60ff168154811061220a5761220a615be0565b9060005260206000209060030201600101600082825461222a9190615cb0565b9250508190555061233482600501805480602002602001604051908101604052809291908181526020016000905b8282101561230457838290600052602060002001805461227790615970565b80601f01602080910402602001604051908101604052809291908181526020018280546122a390615970565b80156122f05780601f106122c5576101008083540402835291602001916122f0565b820191906000526020600020905b8154815290600101906020018083116122d357829003601f168201915b505050505081526020019060010190612258565b5050506002860154604051612320925060200190815260200190565b6040516020818303038152906040526148cb565b805161234a916005850191602090910190615020565b5060405163289047b960e21b8152336004820152602481018a90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a2411ee490604401600060405180830381600087803b1580156123b357600080fd5b505af11580156123c7573d6000803e3d6000fd5b505050505050505050505050505050565b60606000826040516020016123ed9190615954565b60405160208183030381529060405261240590615a20565b60008181526009602052604090208451919250906124355760405162461bcd60e51b81526004016105e390615cf8565b6002815460ff16600381111561244d5761244d615253565b1461246a5760405162461bcd60e51b81526004016105e390615d2f565b80600601805480602002602001604051908101604052809291908181526020016000905b8282101561256c5760008481526020908190206040805160608101825260038602909201805460ff168352600181015493830193909352600283018054929392918401916124db90615970565b80601f016020809104026020016040519081016040528092919081815260200182805461250790615970565b80156125545780601f1061252957610100808354040283529160200191612554565b820191906000526020600020905b81548152906001019060200180831161253757829003601f168201915b5050505050815250508152602001906001019061248e565b5050505092505050919050565b8051602081830181018051600a82529282019190930120915280546001820154600283015460038401546004850154600586015460068701805460ff8816986101009098046001600160a01b03169791906125d390615970565b80601f01602080910402602001604051908101604052809291908181526020018280546125ff90615970565b801561264c5780601f106126215761010080835404028352916020019161264c565b820191906000526020600020905b81548152906001019060200180831161262f57829003601f168201915b50505050509080600701805461266190615970565b80601f016020809104026020016040519081016040528092919081815260200182805461268d90615970565b80156126da5780601f106126af576101008083540402835291602001916126da565b820191906000526020600020905b8154815290600101906020018083116126bd57829003601f168201915b5050505050908060080180546126ef90615970565b80601f016020809104026020016040519081016040528092919081815260200182805461271b90615970565b80156127685780601f1061273d57610100808354040283529160200191612768565b820191906000526020600020905b81548152906001019060200180831161274b57829003601f168201915b505050505090508a565b606060006006836040516127869190615954565b90815260200160405180910390206002015490506000816127a690615cc3565b9150819050836127b5826149b7565b6040516020016127c6929190615d66565b60405160208183030381529060405292505050919050565b60005460ff1615156001146128055760405162461bcd60e51b81526004016105e390615bf6565b60026005546128149190615da2565b341461281f57600080fd5b3360009081526008602052604081209060059061283b84612772565b90506000816040516020016128509190615954565b60405160208183030381529060405261286890615dc4565b905060008560405160200161287d9190615954565b6040516020818303038152906040528051906020012090506113886006876040516128a89190615954565b908152602001604051809103902060020154106129075760405162461bcd60e51b815260206004820152601c60248201527f4d6178696d756d206d656d626572206c696d697420726561636865640000000060448201526064016105e3565b60018751116129515760405162461bcd60e51b8152602060048201526016602482015275506c656173652066696c6c20566f746572204e616d6560501b60448201526064016105e3565b60188751106129ad5760405162461bcd60e51b815260206004820152602260248201527f566f746572206e616d65206f766572207468616e203234206368617261637465604482015261727360f01b60648201526084016105e3565b856040516020016129be9190615954565b60408051601f198184030181528282528051602091820120336000908152600883529290922091926129f49260030191016159aa565b6040516020818303038152906040528051906020012014158015612a73575085604051602001612a249190615954565b60408051601f19818403018152828252805160209182012033600090815260088352929092209192612a5a9260040191016159aa565b6040516020818303038152906040528051906020012014155b8015612a8f5750336000908152600e602052604090205460ff16155b612adb5760405162461bcd60e51b815260206004820152601a60248201527f566f746572206973207265676973746572656420696e204f726700000000000060448201526064016105e3565b6000818152600b602052604090206001015415612b325760405162461bcd60e51b8152602060048201526015602482015274456c656374696f6e20696e2070726f67726573732160581b60448201526064016105e3565b6000835111612b8e5760405162461bcd60e51b815260206004820152602260248201527f4661696c656420746f2067656e657261746520756e6971756520566f74657220604482015261125160f21b60648201526084016105e3565b846003018054612b9d90615970565b9050600003612bd25760038501612bb48782615ae1565b506001850180546001600160801b031916608084901c179055612c17565b846004018054612be190615970565b9050600003612c175760048501612bf88782615ae1565b506001850180546001600160801b0316600160801b608085901c021790555b8454610100600160a81b031916336101000217855560028501612c3a8882615ae1565b506040805160008082526020820190925290612c66565b6060815260200190600190039081612c515790505b508051612c7d916005880191602090910190615020565b508454600160ff19918216811787556001600160801b031984166000908152600d60205260408120805490931690911790915560048054909190612cc090615cc3565b90915550604051630624515160e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906331228a8890612d129033908890600401615cdc565b600060405180830381600087803b158015612d2c57600080fd5b505af1158015612d40573d6000803e3d6000fd5b5050505050505050505050565b60005460ff161515600114612d745760405162461bcd60e51b81526004016105e390615bf6565b83600081604051602001612d889190615954565b60408051601f19818403018152828252805160209182012033600090815260078352929092209192612dbe9260040191016159aa565b604051602081830303815290604052805190602001201480612e3a575081604051602001612dec9190615954565b60408051601f19818403018152828252805160209182012033600090815260078352929092209192612e229260050191016159aa565b60405160208183030381529060405280519060200120145b15612e4757506001612f31565b81604051602001612e589190615954565b604051602081830303815290604052612e7090615a20565b336000908152600760209081526040918290209151612e939260040191016159aa565b604051602081830303815290604052612eab90615a20565b141580612f1a575081604051602001612ec49190615954565b604051602081830303815290604052612edc90615a20565b336000908152600760209081526040918290209151612eff9260050191016159aa565b604051602081830303815290604052612f1790615a20565b14155b15612f31576000612f2a83614617565b5060019150505b80612f4e5760405162461bcd60e51b81526004016105e390615a44565b6000600687604051612f609190615954565b90815260200160405180910390206004018054612f7c90615970565b905011612fbe5760405162461bcd60e51b815260206004820152601060248201526f13dc99c81251081b9bdd08199bdd5b9960821b60448201526064016105e3565b60018551116130035760405162461bcd60e51b815260206004820152601160248201527049442063616e277420626520656d70747960781b60448201526064016105e3565b600585511061304f5760405162461bcd60e51b815260206004820152601860248201527749442073686f756c64203c2035206368617261637465727360401b60448201526064016105e3565b60018451116130935760405162461bcd60e51b815260206004820152601060248201526f506c656173652066696c6c206e616d6560801b60448201526064016105e3565b60198451106130e05760405162461bcd60e51b8152602060048201526019602482015278456c656374696f6e206e616d652073686f756c64203c20323560381b60448201526064016105e3565b600a6006876040516130f29190615954565b9081526020016040518091039020600101541061314a5760405162461bcd60e51b815260206004820152601660248201527513585e1a5b5d5b48195d995b9d1cc81c995858da195960521b60448201526064016105e3565b60018360ff16116131955760405162461bcd60e51b81526020600482015260156024820152744d696e696d756d20322063616e646964617465732160581b60448201526064016105e3565b600086866040516020016131aa929190615d66565b6040516020818303038152906040526131c290615a20565b6000818152600960209081526040808320600c909252909120549192509060ff16156132255760405162461bcd60e51b8152602060048201526012602482015271456c656374696f6e2049442065786973747360701b60448201526064016105e3565b600581016132338982615ae1565b506001810182905560405161324c908790602001615954565b60405160208183030381529060405261326490615a20565b6002820155805461ffff191660ff1961010060ff88160281169190911782556000838152600c6020526040908190208054909216600117909155516006906132ad908a90615954565b9081526020016040518091039020600101600081546132cb90615cc3565b909155505050505050505050565b60086020526000908152604090208054600182015460028301805460ff8416946101009094046001600160a01b031693608084811b94600160801b9004901b92909161332490615970565b80601f016020809104026020016040519081016040528092919081815260200182805461335090615970565b801561339d5780601f106133725761010080835404028352916020019161339d565b820191906000526020600020905b81548152906001019060200180831161338057829003601f168201915b5050505050908060030180546133b290615970565b80601f01602080910402602001604051908101604052809291908181526020018280546133de90615970565b801561342b5780601f106134005761010080835404028352916020019161342b565b820191906000526020600020905b81548152906001019060200180831161340e57829003601f168201915b50505050509080600401805461344090615970565b80601f016020809104026020016040519081016040528092919081815260200182805461346c90615970565b80156134b95780601f1061348e576101008083540402835291602001916134b9565b820191906000526020600020905b81548152906001019060200180831161349c57829003601f168201915b5050505050905087565b6000606060006060806000866040516020016134df9190615954565b6040516020818303038152906040526134f790615a20565b600081815260096020526040902090915080600101549650806002015460405160200161352691815260200190565b60408051601f1981840301815291905260068201549096509450846001600160401b038111156135585761355861514e565b60405190808252806020026020018201604052801561358b57816020015b60608152602001906001900390816135765790505b509350846001600160401b038111156135a6576135a661514e565b6040519080825280602002602001820160405280156135cf578160200160208202803683370190505b50925060005b858110156136f5578160060181815481106135f2576135f2615be0565b9060005260206000209060030201600201805461360e90615970565b80601f016020809104026020016040519081016040528092919081815260200182805461363a90615970565b80156136875780601f1061365c57610100808354040283529160200191613687565b820191906000526020600020905b81548152906001019060200180831161366a57829003601f168201915b505050505085828151811061369e5761369e615be0565b60200260200101819052508160060181815481106136be576136be615be0565b9060005260206000209060030201600101548482815181106136e2576136e2615be0565b60209081029190910101526001016135d5565b50505091939590929450565b6001546001600160a01b0316331461372b5760405162461bcd60e51b81526004016105e390615924565b6000805460ff16151590036137895760005460ff161561377a5760405162461bcd60e51b815260206004820152600a6024820152694163746976617465642160b01b60448201526064016105e3565b6000805460ff19166001179055565b60005460ff1615156001036137e45760005460ff1615156001146137d95760405162461bcd60e51b81526020600482015260076024820152665061757365642160c81b60448201526064016105e3565b6000805460ff191690555b565b80516020818301810180516006825292820191909301209152805460018201546002830154600384015460048501805460ff8616966101009096046001600160a01b031695919061383690615970565b80601f016020809104026020016040519081016040528092919081815260200182805461386290615970565b80156138af5780601f10613884576101008083540402835291602001916138af565b820191906000526020600020905b81548152906001019060200180831161389257829003601f168201915b5050505050905086565b6001546001600160a01b031633146138e35760405162461bcd60e51b81526004016105e390615924565b6001546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561391c573d6000803e3d6000fd5b50604051630624515160e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906331228a88906106789033908590600401615cdc565b6000606060008060008651116139935760405162461bcd60e51b81526004016105e390615cf8565b6000866040516020016139a69190615954565b6040516020818303038152906040526139be90615a20565b60008181526009602052604081209192505b600682015463ffffffff82161015613b9a57876040516020016139f39190615954565b60405160208183030381529060405280519060200120826006018263ffffffff1681548110613a2457613a24615be0565b9060005260206000209060030201600201604051602001613a4591906159aa565b6040516020818303038152906040528051906020012003613b8a576001826006018263ffffffff1681548110613a7d57613a7d615be0565b9060005260206000209060030201600201836006018363ffffffff1681548110613aa957613aa9615be0565b600091825260209091206003909102015460068501805460ff9092169163ffffffff8616908110613adc57613adc615be0565b906000526020600020906003020160010154828054613afa90615970565b80601f0160208091040260200160405190810160405280929190818152602001828054613b2690615970565b8015613b735780601f10613b4857610100808354040283529160200191613b73565b820191906000526020600020905b815481529060010190602001808311613b5657829003601f168201915b505050505092509650965096509650505050613bb8565b613b9381615df7565b90506139d0565b50506040805160208101909152600080825295509350849250829150505b92959194509250565b60005460ff1615613bd157600080fd5b3467a688906bd8b0000014613c1f5760405162461bcd60e51b8152602060048201526014602482015273283632b0b9b29039b2b7321018991022ba3432b960611b60448201526064016105e3565b6001805460008054610100600160a81b0319166101006001600160a01b038416021790556001600160a01b0319169055604051613c60908290602001615954565b60408051601f19818403018152908290528051602090910120600255600080546001600160a01b0361010090910416913480156108fc0292909190818181858888f19350505050158015613cb8573d6000803e3d6000fd5b505060008054610100600160a81b0319169055600180546001600160a01b03191633179055565b80600081604051602001613cf39190615954565b60408051601f19818403018152828252805160209182012033600090815260078352929092209192613d299260040191016159aa565b604051602081830303815290604052805190602001201480613da5575081604051602001613d579190615954565b60408051601f19818403018152828252805160209182012033600090815260078352929092209192613d8d9260050191016159aa565b60405160208183030381529060405280519060200120145b15613db257506001613e9c565b81604051602001613dc39190615954565b604051602081830303815290604052613ddb90615a20565b336000908152600760209081526040918290209151613dfe9260040191016159aa565b604051602081830303815290604052613e1690615a20565b141580613e85575081604051602001613e2f9190615954565b604051602081830303815290604052613e4790615a20565b336000908152600760209081526040918290209151613e6a9260050191016159aa565b604051602081830303815290604052613e8290615a20565b14155b15613e9c576000613e9583614617565b5060019150505b80613eb95760405162461bcd60e51b81526004016105e390615a44565b600083604051602001613ecc9190615954565b604051602081830303815290604052613ee490615a20565b600081815260096020526040808220905192935091600690613f0a9060058501906159aa565b90815260408051918290036020908101832060030154908301520160405160208183030381529060405290506000613f4187614617565b604051602001613f519190615954565b60408051808303601f190181528282528051602091820120336000908152600783528381206003015483860152835180860390930183528484019093526002870154606085015293509160800160405160208183030381529060405290506000613fba8a614adf565b90506000613fc78b614c6a565b90506000868486604051602001613fe093929190615e1a565b60405160208183030381529060405280519060200120905060008c511161403f5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908195b1958dd1a5bdb881251606a1b60448201526064016105e3565b60008c51116140605760405162461bcd60e51b81526004016105e390615cf8565b60008990526009602052875462010000900460ff16156140b65760405162461bcd60e51b8152602060048201526011602482015270115b1958dd1a5bdb88199a5b9a5cda1959607a1b60448201526064016105e3565b6002885460ff1660038111156140ce576140ce615253565b146141155760405162461bcd60e51b8152602060048201526017602482015276115b1958dd1a5bdb881a5cc81b9bdd081cdd185c9d1959604a1b60448201526064016105e3565b61411e8c614d0a565b82101561416d5760405162461bcd60e51b815260206004820152601f60248201527f6e6565642035302520746f74616c206d656d62657220746f2066696e6973680060448201526064016105e3565b614178426005615cb0565b6004890155875462ff00ff191662010003178855604051600090600a906141a0908f90615954565b9081526040516020918190039190910190208054600380830186905560016001600160a81b0319909216610100330217821783558b01549082015560048a0154600282015560058082018490559091506006820190614201908b0182615e5d565b50600289015460048201556007810161421a8582615ae1565b50600881016142298782615ae1565b506000878152600b602052604081208181556001015560008a8152600960205260408120805462ffffff1916815560018101829055600281018290556003810182905560048101829055906142816005830182615076565b6123c76006830160006150b3565b806000816040516020016142a39190615954565b60408051601f198184030181528282528051602091820120336000908152600783529290922091926142d99260040191016159aa565b6040516020818303038152906040528051906020012014806143555750816040516020016143079190615954565b60408051601f1981840301815282825280516020918201203360009081526007835292909220919261433d9260050191016159aa565b60405160208183030381529060405280519060200120145b156143625750600161444c565b816040516020016143739190615954565b60405160208183030381529060405261438b90615a20565b3360009081526007602090815260409182902091516143ae9260040191016159aa565b6040516020818303038152906040526143c690615a20565b1415806144355750816040516020016143df9190615954565b6040516020818303038152906040526143f790615a20565b33600090815260076020908152604091829020915161441a9260050191016159aa565b60405160208183030381529060405261443290615a20565b14155b1561444c57600061444583614617565b5060019150505b806144695760405162461bcd60e51b81526004016105e390615a44565b600083511161448a5760405162461bcd60e51b81526004016105e390615cf8565b60008360405160200161449d9190615954565b6040516020818303038152906040526144b590615a20565b905060006144c285614617565b6040516020016144d29190615954565b60408051601f1981840301815291815281516020928301206000858152600990935291209091506000815460ff16600381111561451157614511615253565b1461455e5760405162461bcd60e51b815260206004820152601e60248201527f456c656374696f6e206973206e6f7420696e207072657061726174696f6e000060448201526064016105e3565b60068101548154610100900460ff16146145af5760405162461bcd60e51b815260206004820152601260248201527110d85b991a59185d1948139bdd08199d5b1b60721b60448201526064016105e3565b6145ba426005615cb0565b6003820155805460ff191660021790556000818152600b6020526040902090815560010155505050565b600080826040516020016145f89190615954565b60408051601f1981840301815291905280516020909101209392505050565b6060600061463e83604051806040016040528060018152602001602d60f81b815250614d61565b9050600081511161469b5760405162461bcd60e51b815260206004820152602160248201527f496e76616c696420637573746f6d20656c656374696f6e20494420666f726d616044820152601d60fa1b60648201526084016105e3565b806000815181106146ae576146ae615be0565b6020026020010151915050919050565b600081815b81518110156147ba5760308282815181106146e0576146e0615be0565b016020015160f81c108015906147105750603982828151811061470557614705615be0565b016020015160f81c11155b8061475a5750604182828151811061472a5761472a615be0565b016020015160f81c1080159061475a5750605a82828151811061474f5761474f615be0565b016020015160f81c11155b806147a45750606182828151811061477457614774615be0565b016020015160f81c108015906147a45750607a82828151811061479957614799615be0565b016020015160f81c11155b6147b2575060009392505050565b6001016146c3565b5060019392505050565b600081815b815181101561480f578181815181106147e4576147e4615be0565b01602001516001600160f81b031916600160fd1b03614807575060019392505050565b6001016147c9565b5060009392505050565b6001600160a01b0382166000908152600860205260408120815b60058201548110156148be576040805160208101869052016040516020818303038152906040528051906020012082600501828154811061487657614876615be0565b9060005260206000200160405160200161489091906159aa565b60405160208183030381529060405280519060200120036148b6576001925050506148c5565b600101614833565b5060009150505b92915050565b60606000835160016148dd9190615cb0565b6001600160401b038111156148f4576148f461514e565b60405190808252806020026020018201604052801561492757816020015b60608152602001906001900390816149125790505b50905060005b84518163ffffffff16101561499057848163ffffffff168151811061495457614954615be0565b6020026020010151828263ffffffff168151811061497457614974615be0565b60200260200101819052508061498990615df7565b905061492d565b5082818551815181106149a5576149a5615be0565b60209081029190910101529392505050565b6060816000036149de5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614a05576149f181615cc3565b90506149fe600a83615da2565b91506149e2565b6000816001600160401b03811115614a1f57614a1f61514e565b6040519080825280601f01601f191660200182016040528015614a49576020820181803683370190505b509050815b8515614ad657614a5f600182615f29565b90506000614a6e600a88615da2565b614a7990600a615bb0565b614a839088615f29565b614a8e906030615f3c565b905060008160f81b905080848481518110614aab57614aab615be0565b60200101906001600160f81b031916908160001a905350614acd600a89615da2565b97505050614a4e565b50949350505050565b6060600082604051602001614af49190615954565b604051602081830303815290604052614b0c90615a20565b6000818152600960209081526040808320815192830190915282825292935090805b600684015460ff82161015614c5f5781846006018260ff1681548110614b5657614b56615be0565b9060005260206000209060030201600101541115614c4f57836006018160ff1681548110614b8657614b86615be0565b9060005260206000209060030201600101549150836006018160ff1681548110614bb257614bb2615be0565b90600052602060002090600302016002018054614bce90615970565b80601f0160208091040260200160405190810160405280929190818152602001828054614bfa90615970565b8015614c475780601f10614c1c57610100808354040283529160200191614c47565b820191906000526020600020905b815481529060010190602001808311614c2a57829003601f168201915b505050505092505b614c5881615c91565b9050614b2e565b509095945050505050565b60008082604051602001614c7e9190615954565b604051602081830303815290604052614c9690615f55565b6001600160c01b031981166000908152600960205260408120919250805b600683015460ff82161015614ad657826006018160ff1681548110614cdb57614cdb615be0565b90600052602060002090600302016001015482614cf89190615cb0565b9150614d0381615c91565b9050614cb4565b600080614d1683614617565b90506000600682604051614d2a9190615954565b90815260200160405180910390209050600060028260020154614d4d9190615da2565b614d58906001615cb0565b95945050505050565b60608282600160005b8351811015614dd55782600081518110614d8657614d86615be0565b602001015160f81c60f81b6001600160f81b031916848281518110614dad57614dad615be0565b01602001516001600160f81b03191603614dcd57614dca82615cc3565b91505b600101614d6a565b506000816001600160401b03811115614df057614df061514e565b604051908082528060200260200182016040528015614e2357816020015b6060815260200190600190039081614e0e5790505b50905060008060005b8651811015614ece5785600081518110614e4857614e48615be0565b602001015160f81c60f81b6001600160f81b031916878281518110614e6f57614e6f615be0565b01602001516001600160f81b03191603614ec657614e8e8a8483614f05565b848381518110614ea057614ea0615be0565b6020908102919091010152614eb6816001615cb0565b925081614ec281615cc3565b9250505b600101614e2c565b50614edb89838851614f05565b838281518110614eed57614eed615be0565b60209081029190910101525090979650505050505050565b606083828411801590614f19575080518311155b614f615760405162461bcd60e51b8152602060048201526019602482015278496e76616c696420737562737472696e6720696e646963657360381b60448201526064016105e3565b6000614f6d8585615f29565b6001600160401b03811115614f8457614f8461514e565b6040519080825280601f01601f191660200182016040528015614fae576020820181803683370190505b509050845b8481101561501657828181518110614fcd57614fcd615be0565b01602001516001600160f81b03191682614fe78884615f29565b81518110614ff757614ff7615be0565b60200101906001600160f81b031916908160001a905350600101614fb3565b5095945050505050565b828054828255906000526020600020908101928215615066579160200282015b8281111561506657825182906150569082615ae1565b5091602001919060010190615040565b506150729291506150d4565b5090565b50805461508290615970565b6000825580601f10615092575050565b601f0160209004906000526020600020908101906150b091906150f1565b50565b50805460008255600302906000526020600020908101906150b09190615106565b808211156150725760006150e88282615076565b506001016150d4565b5b8082111561507257600081556001016150f2565b8082111561507257805460ff1916815560006001820181905561512c6002830182615076565b50600301615106565b60006020828403121561514757600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261517557600080fd5b81356001600160401b038082111561518f5761518f61514e565b604051601f8301601f19908116603f011681019082821181831017156151b7576151b761514e565b816040528381528660208588010111156151d057600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561520357600080fd5b82356001600160401b038082111561521a57600080fd5b61522686838701615164565b9350602085013591508082111561523c57600080fd5b5061524985828601615164565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b60005b8381101561528457818101518382015260200161526c565b50506000910152565b600081518084526152a5816020860160208601615269565b601f01601f19169290920160200192915050565b600061010060048b106152ce576152ce615253565b8a835260ff8a16602084015288151560408401528760608401528660808401528560a08401528460c08401528060e084015261530c8184018561528d565b9b9a5050505050505050505050565b60008282518085526020808601955060208260051b8401016020860160005b8481101561536857601f1986840301895261535683835161528d565b9884019892509083019060010161533a565b5090979650505050505050565b86151581526001600160a01b038616602082015260c0604082018190526000906153a19083018761528d565b82810360608401526153b3818761531b565b905082810360808401526153c7818661531b565b905082810360a08401526153db818561531b565b9998505050505050505050565b6000602082840312156153fa57600080fd5b81356001600160a01b038116811461541157600080fd5b9392505050565b891515815260ff891660208201526001600160b01b03198881166040830152871660608201526001600160a01b038616608082015260a0810185905260c0810184905261012060e082018190526000906154748382018661528d565b9050828103610100840152615489818561528d565b9c9b505050505050505050505050565b600080600080608085870312156154af57600080fd5b84356001600160401b03808211156154c657600080fd5b6154d288838901615164565b955060208701359150808211156154e857600080fd5b6154f488838901615164565b9450604087013591508082111561550a57600080fd5b5061551787828801615164565b92505060608501356002811061552c57600080fd5b939692955090935050565b803560ff8116811461554857600080fd5b919050565b60008060006060848603121561556257600080fd5b83356001600160401b0381111561557857600080fd5b61558486828701615164565b93505061559360208501615537565b9150604084013590509250925092565b6000602082840312156155b557600080fd5b81356001600160401b038111156155cb57600080fd5b6155d784828501615164565b949350505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b8381101561565557888303603f190185528151805160ff168452878101518885015286015160608785018190526156418186018361528d565b968901969450505090860190600101615608565b509098975050505050505050565b60006101408c1515835260018060a01b038c1660208401528a60408401528960608401528860808401528760a08401528660c08401528060e08401526156ab8184018761528d565b90508281036101008401526156c0818661528d565b90508281036101208401526156d5818561528d565b9d9c50505050505050505050505050565b602081526000615411602083018461528d565b6000806000806080858703121561570f57600080fd5b84356001600160401b038082111561572657600080fd5b61573288838901615164565b9550602087013591508082111561574857600080fd5b61575488838901615164565b9450604087013591508082111561576a57600080fd5b5061577787828801615164565b92505061578660608601615537565b905092959194509250565b87151581526001600160a01b03871660208201526001600160801b031986811660408301528516606082015260e0608082018190526000906157d59083018661528d565b82810360a08401526157e7818661528d565b905082810360c08401526157fb818561528d565b9a9950505050505050505050565b8581526000602060a0602084015261582460a084018861528d565b866040850152838103606085015261583c818761531b565b84810360808601528551808252602080880193509091019060005b8181101561587357835183529284019291840191600101615857565b50909a9950505050505050505050565b60006002881061589557615895615253565b87825260018060a01b038716602083015285604083015284606083015283608083015260c060a08301526158cc60c083018461528d565b98975050505050505050565b6000602082840312156158ea57600080fd5b61541182615537565b841515815260806020820152600061590e608083018661528d565b60ff949094166040830152506060015292915050565b6020808252601690820152752737ba103a34329031b7b73a3930b1ba1037bbb732b960511b604082015260600190565b60008251615966818460208701615269565b9190910192915050565b600181811c9082168061598457607f821691505b6020821081036159a457634e487b7160e01b600052602260045260246000fd5b50919050565b60008083546159b881615970565b600182811680156159d057600181146159e557615a14565b60ff1984168752821515830287019450615a14565b8760005260208060002060005b85811015615a0b5781548a8201529084019082016159f2565b50505082870194505b50929695505050505050565b805160208083015191908110156159a45760001960209190910360031b1b16919050565b6020808252601e908201527f41646d696e206e6f7420696e2074686973206f7267616e697a6174696f6e0000604082015260600190565b601f821115615ac7576000816000526020600020601f850160051c81016020861015615aa45750805b601f850160051c820191505b81811015615ac357828155600101615ab0565b5050505b505050565b600019600383901b1c191660019190911b1790565b81516001600160401b03811115615afa57615afa61514e565b615b0e81615b088454615970565b84615a7b565b602080601f831160018114615b3d5760008415615b2b5750858301515b615b358582615acc565b865550615ac3565b600085815260208120601f198616915b82811015615b6c57888601518255948401946001909101908401615b4d565b5085821015615b8a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176148c5576148c5615b9a565b600060208284031215615bd957600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60208082526017908201527614de5cdd195b481a5cc81b9bdd081858dd1a5d985d1959604a1b604082015260600190565b60008251615c39818460208701615269565b602d60f81b9201918252506420b236b4b760d91b6001820152600601919050565b805160208201516001600160b01b0319808216929190600a831015615c8957808184600a0360031b1b83161693505b505050919050565b600060ff821660ff8103615ca757615ca7615b9a565b60010192915050565b808201808211156148c5576148c5615b9a565b600060018201615cd557615cd5615b9a565b5060010190565b6001600160a01b0392909216825260ff16602082015260400190565b6020808252601a908201527f456c656374696f6e2049442063616e277420626520656d707479000000000000604082015260600190565b6020808252601b908201527f456c656374696f6e206973206e6f7420696e2070726f67726573730000000000604082015260600190565b60008351615d78818460208801615269565b602d60f81b9083019081528351615d96816001840160208801615269565b01600101949350505050565b600082615dbf57634e487b7160e01b600052601260045260246000fd5b500490565b805160208201516001600160801b03198082169291906010831015615c895760109290920360031b82901b161692915050565b600063ffffffff808316818103615e1057615e10615b9a565b6001019392505050565b60008451615e2c818460208901615269565b845190830190615e40818360208901615269565b8451910190615e53818360208801615269565b0195945050505050565b818103615e68575050565b615e728254615970565b6001600160401b03811115615e8957615e8961514e565b615e9781615b088454615970565b6000601f821160018114615ec55760008315615eb35750848201545b615ebd8482615acc565b8555506106a6565b600085815260209020601f19841690600086815260209020845b83811015615eff5782860154825560019586019590910190602001615edf565b5085831015615b8a5793015460001960f8600387901b161c19169092555050600190811b01905550565b818103818111156148c5576148c5615b9a565b60ff81811683821601908111156148c5576148c5615b9a565b805160208201516001600160c01b03198082169291906008831015615c895760089290920360031b82901b16169291505056fea2646970667358221220dfe7fbce912247dda7e2fca4e1d60d7b5e71395e4a295f20a85a4e7e34c9d26a64736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1326,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
        "label": "VotreXActivated",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1328,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
        "label": "previousVotreXOwnerAddress",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1330,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
        "label": "VotreXOwnerAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1338,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
        "label": "VotreXOwnerName",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 1340,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
        "label": "organizationsCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1342,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
        "label": "VotreXUserCounter",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1345,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
        "label": "OrganizationPriceFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1350,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
        "label": "organizationData",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Organization)1409_storage)"
      },
      {
        "astId": 1355,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
        "label": "admin",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(ElectionAdmins)1428_storage)"
      },
      {
        "astId": 1360,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
        "label": "voters",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Voter)1472_storage)"
      },
      {
        "astId": 1365,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
        "label": "electionInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_struct(ElectionDetail)1494_storage)"
      },
      {
        "astId": 1370,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
        "label": "electionResults",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_struct(ElectionResult)1454_storage)"
      },
      {
        "astId": 1375,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
        "label": "activeElection",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_struct(ActiveElectionList)1433_storage)"
      },
      {
        "astId": 1379,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
        "label": "electionExistanceChecks",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1383,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
        "label": "votersIDExists",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes16,t_bool)"
      },
      {
        "astId": 1387,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
        "label": "registeredAdmin",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(CandidateDetail)1501_storage)dyn_storage": {
        "base": "t_struct(CandidateDetail)1501_storage",
        "encoding": "dynamic_array",
        "label": "struct VotreXSystem.CandidateDetail[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes10": {
        "encoding": "inplace",
        "label": "bytes10",
        "numberOfBytes": "10"
      },
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ElectionStatus)1392": {
        "encoding": "inplace",
        "label": "enum VotreXSystem.ElectionStatus",
        "numberOfBytes": "1"
      },
      "t_enum(OrganizationType)1395": {
        "encoding": "inplace",
        "label": "enum VotreXSystem.OrganizationType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(ElectionAdmins)1428_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VotreXSystem.ElectionAdmins)",
        "numberOfBytes": "32",
        "value": "t_struct(ElectionAdmins)1428_storage"
      },
      "t_mapping(t_address,t_struct(Voter)1472_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VotreXSystem.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)1472_storage"
      },
      "t_mapping(t_bytes16,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes16",
        "label": "mapping(bytes16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(ActiveElectionList)1433_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct VotreXSystem.ActiveElectionList)",
        "numberOfBytes": "32",
        "value": "t_struct(ActiveElectionList)1433_storage"
      },
      "t_mapping(t_bytes32,t_struct(ElectionDetail)1494_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct VotreXSystem.ElectionDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(ElectionDetail)1494_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(ElectionResult)1454_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct VotreXSystem.ElectionResult)",
        "numberOfBytes": "32",
        "value": "t_struct(ElectionResult)1454_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Organization)1409_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct VotreXSystem.Organization)",
        "numberOfBytes": "32",
        "value": "t_struct(Organization)1409_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ActiveElectionList)1433_storage": {
        "encoding": "inplace",
        "label": "struct VotreXSystem.ActiveElectionList",
        "members": [
          {
            "astId": 1430,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "orgID",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1432,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "activeElectionID",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CandidateDetail)1501_storage": {
        "encoding": "inplace",
        "label": "struct VotreXSystem.CandidateDetail",
        "members": [
          {
            "astId": 1496,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "candidateID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1498,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "candidateVoteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1500,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "candidateName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ElectionAdmins)1428_storage": {
        "encoding": "inplace",
        "label": "struct VotreXSystem.ElectionAdmins",
        "members": [
          {
            "astId": 1411,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1413,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "adminOrgCount",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1415,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "AdminVoterIDOrg1",
            "offset": 2,
            "slot": "0",
            "type": "t_bytes10"
          },
          {
            "astId": 1417,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "AdminVoterIDOrg2",
            "offset": 12,
            "slot": "0",
            "type": "t_bytes10"
          },
          {
            "astId": 1419,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "electionAdminAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1421,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "nextOrgCreationBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1423,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "adminName",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 1425,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "RegisteredOrgID1",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1427,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "RegisteredOrgID2",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ElectionDetail)1494_storage": {
        "encoding": "inplace",
        "label": "struct VotreXSystem.ElectionDetail",
        "members": [
          {
            "astId": 1475,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ElectionStatus)1392"
          },
          {
            "astId": 1477,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "candidateList",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1479,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "isFinished",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1481,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "electionID",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 1483,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "electionName",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 1485,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1487,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "endTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1489,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "orgID",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1493,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "candidates",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_struct(CandidateDetail)1501_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(ElectionResult)1454_storage": {
        "encoding": "inplace",
        "label": "struct VotreXSystem.ElectionResult",
        "members": [
          {
            "astId": 1435,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "isPruned",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1437,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "adminAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1439,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1441,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1443,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "totalVoter",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1445,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "electionName",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 1447,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "digitalSignature",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 1449,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "registeredOrganization",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1451,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "electionWinner",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 1453,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "signedBy",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Organization)1409_storage": {
        "encoding": "inplace",
        "label": "struct VotreXSystem.Organization",
        "members": [
          {
            "astId": 1398,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "orgType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(OrganizationType)1395"
          },
          {
            "astId": 1400,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "electionAdminAddresses",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1402,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "electionEventCounter",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1404,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "totalMembers",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1406,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "orgName",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 1408,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "orgID",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Voter)1472_storage": {
        "encoding": "inplace",
        "label": "struct VotreXSystem.Voter",
        "members": [
          {
            "astId": 1456,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1458,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "VoterAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1460,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "VoterIDOrg1",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes16"
          },
          {
            "astId": 1462,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "VoterIDOrg2",
            "offset": 16,
            "slot": "1",
            "type": "t_bytes16"
          },
          {
            "astId": 1464,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "VoterName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1466,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "RegisteredOrgID1",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1468,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "RegisteredOrgID2",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1471,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystem",
            "label": "participatedElectionEvents",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}